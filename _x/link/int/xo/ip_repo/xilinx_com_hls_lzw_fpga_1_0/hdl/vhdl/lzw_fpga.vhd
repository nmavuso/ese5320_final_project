-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lzw_fpga is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    event_done : OUT STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    event_start : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    stall_start_ext : OUT STD_LOGIC;
    stall_done_ext : OUT STD_LOGIC;
    stall_start_str : OUT STD_LOGIC;
    stall_done_str : OUT STD_LOGIC;
    stall_start_int : OUT STD_LOGIC;
    stall_done_int : OUT STD_LOGIC );
end;


architecture behav of lzw_fpga is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lzw_fpga_lzw_fpga,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.667000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=4.866910,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=26,HLS_SYN_DSP=0,HLS_SYN_FF=6405,HLS_SYN_LUT=10776,HLS_VERSION=2020_2}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_ID_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 40;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_M_AXI_AWUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_ARUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_WUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_RUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant C_M_AXI_BUSER_WIDTH : INTEGER range 63 downto 0 := 1;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal input_r : STD_LOGIC_VECTOR (63 downto 0);
    signal input_size : STD_LOGIC_VECTOR (31 downto 0);
    signal output_code : STD_LOGIC_VECTOR (63 downto 0);
    signal output_size : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal local_output_code_i_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_code_t_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_output_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal lzw_fpga_entry11_U0_ap_start : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_done : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_continue : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_idle : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_ready : STD_LOGIC;
    signal lzw_fpga_entry11_U0_start_out : STD_LOGIC;
    signal lzw_fpga_entry11_U0_start_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_input_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lzw_fpga_entry11_U0_input_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_input_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzw_fpga_entry11_U0_input_size_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_input_size_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal lzw_fpga_entry11_U0_input_size_out1_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_output_code_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lzw_fpga_entry11_U0_output_code_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_output_size_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lzw_fpga_entry11_U0_output_size_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_output_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lzw_fpga_entry11_U0_output_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_output_length_out_din : STD_LOGIC_VECTOR (63 downto 0);
    signal lzw_fpga_entry11_U0_output_length_out_write : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_ext_blocking_n : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_str_blocking_n : STD_LOGIC;
    signal lzw_fpga_entry11_U0_ap_int_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_start : STD_LOGIC;
    signal load_input_U0_ap_done : STD_LOGIC;
    signal load_input_U0_ap_continue : STD_LOGIC;
    signal load_input_U0_ap_idle : STD_LOGIC;
    signal load_input_U0_ap_ready : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal load_input_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal load_input_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal load_input_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal load_input_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal load_input_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal load_input_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal load_input_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal load_input_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal load_input_U0_input_stream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal load_input_U0_input_stream_write : STD_LOGIC;
    signal load_input_U0_input_r_read : STD_LOGIC;
    signal load_input_U0_input_size_read : STD_LOGIC;
    signal load_input_U0_ap_ext_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_str_blocking_n : STD_LOGIC;
    signal load_input_U0_ap_int_blocking_n : STD_LOGIC;
    signal encoding_U0_ap_start : STD_LOGIC;
    signal encoding_U0_ap_done : STD_LOGIC;
    signal encoding_U0_ap_continue : STD_LOGIC;
    signal encoding_U0_ap_idle : STD_LOGIC;
    signal encoding_U0_ap_ready : STD_LOGIC;
    signal encoding_U0_start_out : STD_LOGIC;
    signal encoding_U0_start_write : STD_LOGIC;
    signal encoding_U0_input_stream_read : STD_LOGIC;
    signal encoding_U0_code_stream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal encoding_U0_code_stream_write : STD_LOGIC;
    signal encoding_U0_input_size_read : STD_LOGIC;
    signal encoding_U0_local_output_code_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal encoding_U0_local_output_code_ce0 : STD_LOGIC;
    signal encoding_U0_local_output_code_we0 : STD_LOGIC;
    signal encoding_U0_local_output_code_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal encoding_U0_local_output_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal encoding_U0_local_output_size_out_write : STD_LOGIC;
    signal encoding_U0_local_output_size_out1_din : STD_LOGIC_VECTOR (31 downto 0);
    signal encoding_U0_local_output_size_out1_write : STD_LOGIC;
    signal encoding_U0_ap_ext_blocking_n : STD_LOGIC;
    signal encoding_U0_ap_str_blocking_n : STD_LOGIC;
    signal encoding_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_channel_done_local_output_code : STD_LOGIC;
    signal encoding_U0_local_output_code_full_n : STD_LOGIC;
    signal decoding_U0_ap_start : STD_LOGIC;
    signal decoding_U0_ap_done : STD_LOGIC;
    signal decoding_U0_ap_continue : STD_LOGIC;
    signal decoding_U0_ap_idle : STD_LOGIC;
    signal decoding_U0_ap_ready : STD_LOGIC;
    signal decoding_U0_start_out : STD_LOGIC;
    signal decoding_U0_start_write : STD_LOGIC;
    signal decoding_U0_code_stream_read : STD_LOGIC;
    signal decoding_U0_output_stream_din : STD_LOGIC_VECTOR (7 downto 0);
    signal decoding_U0_output_stream_write : STD_LOGIC;
    signal decoding_U0_local_output_size_read : STD_LOGIC;
    signal decoding_U0_local_output_size_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal decoding_U0_local_output_size_out_write : STD_LOGIC;
    signal decoding_U0_ap_ext_blocking_n : STD_LOGIC;
    signal decoding_U0_ap_str_blocking_n : STD_LOGIC;
    signal decoding_U0_ap_int_blocking_n : STD_LOGIC;
    signal store_output_U0_ap_start : STD_LOGIC;
    signal store_output_U0_ap_done : STD_LOGIC;
    signal store_output_U0_ap_continue : STD_LOGIC;
    signal store_output_U0_ap_idle : STD_LOGIC;
    signal store_output_U0_ap_ready : STD_LOGIC;
    signal store_output_U0_start_out : STD_LOGIC;
    signal store_output_U0_start_write : STD_LOGIC;
    signal store_output_U0_output_stream_read : STD_LOGIC;
    signal store_output_U0_local_output_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_output_U0_local_output_ce0 : STD_LOGIC;
    signal store_output_U0_local_output_we0 : STD_LOGIC;
    signal store_output_U0_local_output_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal store_output_U0_local_output_length_out_din : STD_LOGIC_VECTOR (8 downto 0);
    signal store_output_U0_local_output_length_out_write : STD_LOGIC;
    signal store_output_U0_ap_ext_blocking_n : STD_LOGIC;
    signal store_output_U0_ap_str_blocking_n : STD_LOGIC;
    signal store_output_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_channel_done_local_output : STD_LOGIC;
    signal store_output_U0_local_output_full_n : STD_LOGIC;
    signal copy_output_code_U0_ap_start : STD_LOGIC;
    signal copy_output_code_U0_ap_done : STD_LOGIC;
    signal copy_output_code_U0_ap_continue : STD_LOGIC;
    signal copy_output_code_U0_ap_idle : STD_LOGIC;
    signal copy_output_code_U0_ap_ready : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_code_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal copy_output_code_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal copy_output_code_U0_local_output_code_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy_output_code_U0_local_output_code_ce0 : STD_LOGIC;
    signal copy_output_code_U0_output_code_read : STD_LOGIC;
    signal copy_output_code_U0_local_output_size_read : STD_LOGIC;
    signal copy_output_code_U0_ap_ext_blocking_n : STD_LOGIC;
    signal copy_output_code_U0_ap_str_blocking_n : STD_LOGIC;
    signal copy_output_code_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_split212_proc_U0_ap_start : STD_LOGIC;
    signal Block_split212_proc_U0_ap_done : STD_LOGIC;
    signal Block_split212_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split212_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split212_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split212_proc_U0_local_output_length_read : STD_LOGIC;
    signal Block_split212_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (8 downto 0);
    signal Block_split212_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split212_proc_U0_ap_ext_blocking_n : STD_LOGIC;
    signal Block_split212_proc_U0_ap_str_blocking_n : STD_LOGIC;
    signal Block_split212_proc_U0_ap_int_blocking_n : STD_LOGIC;
    signal ap_channel_done_local_output_length_load_cast_loc_channel : STD_LOGIC;
    signal local_output_length_load_cast_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_local_output_length_load_cast_loc_channel : STD_LOGIC;
    signal ap_channel_done_local_output_length_load_loc_channel : STD_LOGIC;
    signal local_output_length_load_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_local_output_length_load_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_local_output_length_load_loc_channel : STD_LOGIC;
    signal copy_output_U0_ap_start : STD_LOGIC;
    signal copy_output_U0_ap_done : STD_LOGIC;
    signal copy_output_U0_ap_continue : STD_LOGIC;
    signal copy_output_U0_ap_idle : STD_LOGIC;
    signal copy_output_U0_ap_ready : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (7 downto 0);
    signal copy_output_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal copy_output_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal copy_output_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal copy_output_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal copy_output_U0_local_output_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal copy_output_U0_local_output_ce0 : STD_LOGIC;
    signal copy_output_U0_output_r_read : STD_LOGIC;
    signal copy_output_U0_ap_ext_blocking_n : STD_LOGIC;
    signal copy_output_U0_ap_str_blocking_n : STD_LOGIC;
    signal copy_output_U0_ap_int_blocking_n : STD_LOGIC;
    signal Block_split214_proc_U0_ap_start : STD_LOGIC;
    signal Block_split214_proc_U0_ap_done : STD_LOGIC;
    signal Block_split214_proc_U0_ap_continue : STD_LOGIC;
    signal Block_split214_proc_U0_ap_idle : STD_LOGIC;
    signal Block_split214_proc_U0_ap_ready : STD_LOGIC;
    signal Block_split214_proc_U0_output_size_read : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_AWVALID : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_WVALID : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_WLAST : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARVALID : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Block_split214_proc_U0_m_axi_gmem_RREADY : STD_LOGIC;
    signal Block_split214_proc_U0_m_axi_gmem_BREADY : STD_LOGIC;
    signal Block_split214_proc_U0_local_output_size_read : STD_LOGIC;
    signal Block_split214_proc_U0_output_length_read : STD_LOGIC;
    signal Block_split214_proc_U0_ap_ext_blocking_n : STD_LOGIC;
    signal Block_split214_proc_U0_ap_str_blocking_n : STD_LOGIC;
    signal Block_split214_proc_U0_ap_int_blocking_n : STD_LOGIC;
    signal local_output_code_i_full_n : STD_LOGIC;
    signal local_output_code_t_empty_n : STD_LOGIC;
    signal local_output_i_full_n : STD_LOGIC;
    signal local_output_t_empty_n : STD_LOGIC;
    signal input_c_full_n : STD_LOGIC;
    signal input_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal input_c_empty_n : STD_LOGIC;
    signal input_size_c_full_n : STD_LOGIC;
    signal input_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_c_empty_n : STD_LOGIC;
    signal input_size_c24_full_n : STD_LOGIC;
    signal input_size_c24_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal input_size_c24_empty_n : STD_LOGIC;
    signal output_code_c_full_n : STD_LOGIC;
    signal output_code_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_code_c_empty_n : STD_LOGIC;
    signal output_size_c_full_n : STD_LOGIC;
    signal output_size_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_size_c_empty_n : STD_LOGIC;
    signal output_c_full_n : STD_LOGIC;
    signal output_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_c_empty_n : STD_LOGIC;
    signal output_length_c_full_n : STD_LOGIC;
    signal output_length_c_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal output_length_c_empty_n : STD_LOGIC;
    signal input_stream_full_n : STD_LOGIC;
    signal input_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal input_stream_empty_n : STD_LOGIC;
    signal code_stream_full_n : STD_LOGIC;
    signal code_stream_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal code_stream_empty_n : STD_LOGIC;
    signal local_output_size_c_full_n : STD_LOGIC;
    signal local_output_size_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_size_c_empty_n : STD_LOGIC;
    signal local_output_size_c25_full_n : STD_LOGIC;
    signal local_output_size_c25_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_size_c25_empty_n : STD_LOGIC;
    signal output_stream_full_n : STD_LOGIC;
    signal output_stream_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal output_stream_empty_n : STD_LOGIC;
    signal local_output_size_c26_full_n : STD_LOGIC;
    signal local_output_size_c26_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_size_c26_empty_n : STD_LOGIC;
    signal local_output_length_c_full_n : STD_LOGIC;
    signal local_output_length_c_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal local_output_length_c_empty_n : STD_LOGIC;
    signal local_output_length_load_loc_channel_dout : STD_LOGIC_VECTOR (8 downto 0);
    signal local_output_length_load_loc_channel_empty_n : STD_LOGIC;
    signal local_output_length_load_cast_loc_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal local_output_length_load_cast_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_lzw_fpga_entry11_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_lzw_fpga_entry11_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_load_input_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_load_input_U0_ap_ready : STD_LOGIC;
    signal start_for_encoding_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_encoding_U0_full_n : STD_LOGIC;
    signal start_for_encoding_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_encoding_U0_empty_n : STD_LOGIC;
    signal load_input_U0_start_full_n : STD_LOGIC;
    signal load_input_U0_start_write : STD_LOGIC;
    signal start_for_decoding_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_decoding_U0_full_n : STD_LOGIC;
    signal start_for_decoding_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_decoding_U0_empty_n : STD_LOGIC;
    signal start_for_store_output_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_output_U0_full_n : STD_LOGIC;
    signal start_for_store_output_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_store_output_U0_empty_n : STD_LOGIC;
    signal start_for_Block_split212_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split212_proc_U0_full_n : STD_LOGIC;
    signal start_for_Block_split212_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Block_split212_proc_U0_empty_n : STD_LOGIC;
    signal copy_output_code_U0_start_full_n : STD_LOGIC;
    signal copy_output_code_U0_start_write : STD_LOGIC;
    signal Block_split212_proc_U0_start_full_n : STD_LOGIC;
    signal Block_split212_proc_U0_start_write : STD_LOGIC;
    signal copy_output_U0_start_full_n : STD_LOGIC;
    signal copy_output_U0_start_write : STD_LOGIC;
    signal Block_split214_proc_U0_start_full_n : STD_LOGIC;
    signal Block_split214_proc_U0_start_write : STD_LOGIC;
    signal ap_ext_blocking_cur_n : STD_LOGIC;
    signal ap_str_blocking_cur_n : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_ext_blocking_n : STD_LOGIC;
    signal ap_str_blocking_n : STD_LOGIC;
    signal ap_int_blocking_n : STD_LOGIC;
    signal ap_ext_blocking_n_reg : STD_LOGIC;
    signal ap_str_blocking_n_reg : STD_LOGIC;
    signal ap_int_blocking_n_reg : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component lzw_fpga_lzw_fpga_entry11 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        input_size : IN STD_LOGIC_VECTOR (31 downto 0);
        output_code : IN STD_LOGIC_VECTOR (63 downto 0);
        output_size : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_length : IN STD_LOGIC_VECTOR (63 downto 0);
        input_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_out_full_n : IN STD_LOGIC;
        input_out_write : OUT STD_LOGIC;
        input_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_size_out_full_n : IN STD_LOGIC;
        input_size_out_write : OUT STD_LOGIC;
        input_size_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        input_size_out1_full_n : IN STD_LOGIC;
        input_size_out1_write : OUT STD_LOGIC;
        output_code_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_code_out_full_n : IN STD_LOGIC;
        output_code_out_write : OUT STD_LOGIC;
        output_size_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_size_out_full_n : IN STD_LOGIC;
        output_size_out_write : OUT STD_LOGIC;
        output_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_out_full_n : IN STD_LOGIC;
        output_out_write : OUT STD_LOGIC;
        output_length_out_din : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length_out_full_n : IN STD_LOGIC;
        output_length_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_load_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_stream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        input_stream_full_n : IN STD_LOGIC;
        input_stream_write : OUT STD_LOGIC;
        input_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        input_r_empty_n : IN STD_LOGIC;
        input_r_read : OUT STD_LOGIC;
        input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_empty_n : IN STD_LOGIC;
        input_size_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_encoding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        input_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        input_stream_empty_n : IN STD_LOGIC;
        input_stream_read : OUT STD_LOGIC;
        code_stream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        code_stream_full_n : IN STD_LOGIC;
        code_stream_write : OUT STD_LOGIC;
        input_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        input_size_empty_n : IN STD_LOGIC;
        input_size_read : OUT STD_LOGIC;
        local_output_code_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        local_output_code_ce0 : OUT STD_LOGIC;
        local_output_code_we0 : OUT STD_LOGIC;
        local_output_code_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_out_full_n : IN STD_LOGIC;
        local_output_size_out_write : OUT STD_LOGIC;
        local_output_size_out1_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_out1_full_n : IN STD_LOGIC;
        local_output_size_out1_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_decoding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        code_stream_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        code_stream_empty_n : IN STD_LOGIC;
        code_stream_read : OUT STD_LOGIC;
        output_stream_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        output_stream_full_n : IN STD_LOGIC;
        output_stream_write : OUT STD_LOGIC;
        local_output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_empty_n : IN STD_LOGIC;
        local_output_size_read : OUT STD_LOGIC;
        local_output_size_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_out_full_n : IN STD_LOGIC;
        local_output_size_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_store_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        output_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        output_stream_empty_n : IN STD_LOGIC;
        output_stream_read : OUT STD_LOGIC;
        local_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        local_output_ce0 : OUT STD_LOGIC;
        local_output_we0 : OUT STD_LOGIC;
        local_output_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        local_output_length_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
        local_output_length_out_full_n : IN STD_LOGIC;
        local_output_length_out_write : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_copy_output_code IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        local_output_code_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        local_output_code_ce0 : OUT STD_LOGIC;
        local_output_code_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_code_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_code_empty_n : IN STD_LOGIC;
        output_code_read : OUT STD_LOGIC;
        local_output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_empty_n : IN STD_LOGIC;
        local_output_size_read : OUT STD_LOGIC;
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_Block_split212_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        local_output_length_dout : IN STD_LOGIC_VECTOR (8 downto 0);
        local_output_length_empty_n : IN STD_LOGIC;
        local_output_length_read : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_copy_output IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        local_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        local_output_ce0 : OUT STD_LOGIC;
        local_output_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        output_r_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_r_empty_n : IN STD_LOGIC;
        output_r_read : OUT STD_LOGIC;
        output_length : IN STD_LOGIC_VECTOR (8 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_Block_split214_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_size_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_size_empty_n : IN STD_LOGIC;
        output_size_read : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        local_output_size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        local_output_size_empty_n : IN STD_LOGIC;
        local_output_size_read : OUT STD_LOGIC;
        output_length_dout : IN STD_LOGIC_VECTOR (63 downto 0);
        output_length_empty_n : IN STD_LOGIC;
        output_length_read : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;


    component lzw_fpga_local_output_code IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_local_output IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w64_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w32_d3_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w64_d7_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w8_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w32_d16_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_fifo_w9_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (8 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (8 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_start_for_encoding_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_start_for_decoding_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_start_for_store_output_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_start_for_Block_split212_proc_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component lzw_fpga_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        input_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_code : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_size : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_length : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        event_start : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lzw_fpga_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lzw_fpga_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lzw_fpga_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component lzw_fpga_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (7 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (7 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (0 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component lzw_fpga_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r => input_r,
        input_size => input_size,
        output_code => output_code,
        output_size => output_size,
        output_r => output_r,
        output_length => output_length,
        ap_start => ap_start,
        interrupt => interrupt,
        event_start => event_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component lzw_fpga_gmem0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => load_input_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => load_input_U0_m_axi_gmem0_ARADDR,
        I_ARID => load_input_U0_m_axi_gmem0_ARID,
        I_ARLEN => load_input_U0_m_axi_gmem0_ARLEN,
        I_ARSIZE => load_input_U0_m_axi_gmem0_ARSIZE,
        I_ARLOCK => load_input_U0_m_axi_gmem0_ARLOCK,
        I_ARCACHE => load_input_U0_m_axi_gmem0_ARCACHE,
        I_ARQOS => load_input_U0_m_axi_gmem0_ARQOS,
        I_ARPROT => load_input_U0_m_axi_gmem0_ARPROT,
        I_ARUSER => load_input_U0_m_axi_gmem0_ARUSER,
        I_ARBURST => load_input_U0_m_axi_gmem0_ARBURST,
        I_ARREGION => load_input_U0_m_axi_gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => load_input_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv8_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv1_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component lzw_fpga_gmem1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem1_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => copy_output_code_U0_m_axi_gmem1_AWVALID,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => copy_output_code_U0_m_axi_gmem1_AWADDR,
        I_AWID => copy_output_code_U0_m_axi_gmem1_AWID,
        I_AWLEN => copy_output_code_U0_m_axi_gmem1_AWLEN,
        I_AWSIZE => copy_output_code_U0_m_axi_gmem1_AWSIZE,
        I_AWLOCK => copy_output_code_U0_m_axi_gmem1_AWLOCK,
        I_AWCACHE => copy_output_code_U0_m_axi_gmem1_AWCACHE,
        I_AWQOS => copy_output_code_U0_m_axi_gmem1_AWQOS,
        I_AWPROT => copy_output_code_U0_m_axi_gmem1_AWPROT,
        I_AWUSER => copy_output_code_U0_m_axi_gmem1_AWUSER,
        I_AWBURST => copy_output_code_U0_m_axi_gmem1_AWBURST,
        I_AWREGION => copy_output_code_U0_m_axi_gmem1_AWREGION,
        I_WVALID => copy_output_code_U0_m_axi_gmem1_WVALID,
        I_WREADY => gmem1_WREADY,
        I_WDATA => copy_output_code_U0_m_axi_gmem1_WDATA,
        I_WID => copy_output_code_U0_m_axi_gmem1_WID,
        I_WUSER => copy_output_code_U0_m_axi_gmem1_WUSER,
        I_WLAST => copy_output_code_U0_m_axi_gmem1_WLAST,
        I_WSTRB => copy_output_code_U0_m_axi_gmem1_WSTRB,
        I_BVALID => gmem1_BVALID,
        I_BREADY => copy_output_code_U0_m_axi_gmem1_BREADY,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem_m_axi_U : component lzw_fpga_gmem_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => Block_split214_proc_U0_m_axi_gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => Block_split214_proc_U0_m_axi_gmem_AWADDR,
        I_AWID => Block_split214_proc_U0_m_axi_gmem_AWID,
        I_AWLEN => Block_split214_proc_U0_m_axi_gmem_AWLEN,
        I_AWSIZE => Block_split214_proc_U0_m_axi_gmem_AWSIZE,
        I_AWLOCK => Block_split214_proc_U0_m_axi_gmem_AWLOCK,
        I_AWCACHE => Block_split214_proc_U0_m_axi_gmem_AWCACHE,
        I_AWQOS => Block_split214_proc_U0_m_axi_gmem_AWQOS,
        I_AWPROT => Block_split214_proc_U0_m_axi_gmem_AWPROT,
        I_AWUSER => Block_split214_proc_U0_m_axi_gmem_AWUSER,
        I_AWBURST => Block_split214_proc_U0_m_axi_gmem_AWBURST,
        I_AWREGION => Block_split214_proc_U0_m_axi_gmem_AWREGION,
        I_WVALID => Block_split214_proc_U0_m_axi_gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => Block_split214_proc_U0_m_axi_gmem_WDATA,
        I_WID => Block_split214_proc_U0_m_axi_gmem_WID,
        I_WUSER => Block_split214_proc_U0_m_axi_gmem_WUSER,
        I_WLAST => Block_split214_proc_U0_m_axi_gmem_WLAST,
        I_WSTRB => Block_split214_proc_U0_m_axi_gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => Block_split214_proc_U0_m_axi_gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    gmem2_m_axi_U : component lzw_fpga_gmem2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_DW => 8,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => copy_output_U0_m_axi_gmem2_AWVALID,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => copy_output_U0_m_axi_gmem2_AWADDR,
        I_AWID => copy_output_U0_m_axi_gmem2_AWID,
        I_AWLEN => copy_output_U0_m_axi_gmem2_AWLEN,
        I_AWSIZE => copy_output_U0_m_axi_gmem2_AWSIZE,
        I_AWLOCK => copy_output_U0_m_axi_gmem2_AWLOCK,
        I_AWCACHE => copy_output_U0_m_axi_gmem2_AWCACHE,
        I_AWQOS => copy_output_U0_m_axi_gmem2_AWQOS,
        I_AWPROT => copy_output_U0_m_axi_gmem2_AWPROT,
        I_AWUSER => copy_output_U0_m_axi_gmem2_AWUSER,
        I_AWBURST => copy_output_U0_m_axi_gmem2_AWBURST,
        I_AWREGION => copy_output_U0_m_axi_gmem2_AWREGION,
        I_WVALID => copy_output_U0_m_axi_gmem2_WVALID,
        I_WREADY => gmem2_WREADY,
        I_WDATA => copy_output_U0_m_axi_gmem2_WDATA,
        I_WID => copy_output_U0_m_axi_gmem2_WID,
        I_WUSER => copy_output_U0_m_axi_gmem2_WUSER,
        I_WLAST => copy_output_U0_m_axi_gmem2_WLAST,
        I_WSTRB => copy_output_U0_m_axi_gmem2_WSTRB,
        I_BVALID => gmem2_BVALID,
        I_BREADY => copy_output_U0_m_axi_gmem2_BREADY,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    local_output_code_U : component lzw_fpga_local_output_code
    generic map (
        DataWidth => 32,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => encoding_U0_local_output_code_address0,
        i_ce0 => encoding_U0_local_output_code_ce0,
        i_we0 => encoding_U0_local_output_code_we0,
        i_d0 => encoding_U0_local_output_code_d0,
        i_q0 => local_output_code_i_q0,
        t_address0 => copy_output_code_U0_local_output_code_address0,
        t_ce0 => copy_output_code_U0_local_output_code_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv32_0,
        t_q0 => local_output_code_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => local_output_code_i_full_n,
        i_write => encoding_U0_ap_done,
        t_empty_n => local_output_code_t_empty_n,
        t_read => copy_output_code_U0_ap_ready);

    local_output_U : component lzw_fpga_local_output
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => store_output_U0_local_output_address0,
        i_ce0 => store_output_U0_local_output_ce0,
        i_we0 => store_output_U0_local_output_we0,
        i_d0 => store_output_U0_local_output_d0,
        i_q0 => local_output_i_q0,
        t_address0 => copy_output_U0_local_output_address0,
        t_ce0 => copy_output_U0_local_output_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => local_output_t_q0,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => local_output_i_full_n,
        i_write => store_output_U0_ap_done,
        t_empty_n => local_output_t_empty_n,
        t_read => copy_output_U0_ap_ready);

    lzw_fpga_entry11_U0 : component lzw_fpga_lzw_fpga_entry11
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => lzw_fpga_entry11_U0_ap_start,
        start_full_n => start_for_encoding_U0_full_n,
        ap_done => lzw_fpga_entry11_U0_ap_done,
        ap_continue => lzw_fpga_entry11_U0_ap_continue,
        ap_idle => lzw_fpga_entry11_U0_ap_idle,
        ap_ready => lzw_fpga_entry11_U0_ap_ready,
        start_out => lzw_fpga_entry11_U0_start_out,
        start_write => lzw_fpga_entry11_U0_start_write,
        input_r => input_r,
        input_size => input_size,
        output_code => output_code,
        output_size => output_size,
        output_r => output_r,
        output_length => output_length,
        input_out_din => lzw_fpga_entry11_U0_input_out_din,
        input_out_full_n => input_c_full_n,
        input_out_write => lzw_fpga_entry11_U0_input_out_write,
        input_size_out_din => lzw_fpga_entry11_U0_input_size_out_din,
        input_size_out_full_n => input_size_c_full_n,
        input_size_out_write => lzw_fpga_entry11_U0_input_size_out_write,
        input_size_out1_din => lzw_fpga_entry11_U0_input_size_out1_din,
        input_size_out1_full_n => input_size_c24_full_n,
        input_size_out1_write => lzw_fpga_entry11_U0_input_size_out1_write,
        output_code_out_din => lzw_fpga_entry11_U0_output_code_out_din,
        output_code_out_full_n => output_code_c_full_n,
        output_code_out_write => lzw_fpga_entry11_U0_output_code_out_write,
        output_size_out_din => lzw_fpga_entry11_U0_output_size_out_din,
        output_size_out_full_n => output_size_c_full_n,
        output_size_out_write => lzw_fpga_entry11_U0_output_size_out_write,
        output_out_din => lzw_fpga_entry11_U0_output_out_din,
        output_out_full_n => output_c_full_n,
        output_out_write => lzw_fpga_entry11_U0_output_out_write,
        output_length_out_din => lzw_fpga_entry11_U0_output_length_out_din,
        output_length_out_full_n => output_length_c_full_n,
        output_length_out_write => lzw_fpga_entry11_U0_output_length_out_write,
        ap_ext_blocking_n => lzw_fpga_entry11_U0_ap_ext_blocking_n,
        ap_str_blocking_n => lzw_fpga_entry11_U0_ap_str_blocking_n,
        ap_int_blocking_n => lzw_fpga_entry11_U0_ap_int_blocking_n);

    load_input_U0 : component lzw_fpga_load_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => load_input_U0_ap_start,
        ap_done => load_input_U0_ap_done,
        ap_continue => load_input_U0_ap_continue,
        ap_idle => load_input_U0_ap_idle,
        ap_ready => load_input_U0_ap_ready,
        m_axi_gmem0_AWVALID => load_input_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => load_input_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => load_input_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => load_input_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => load_input_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => load_input_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => load_input_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => load_input_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => load_input_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => load_input_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => load_input_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => load_input_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => load_input_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => load_input_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => load_input_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => load_input_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => load_input_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => load_input_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => load_input_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => load_input_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => load_input_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => load_input_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => load_input_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => load_input_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => load_input_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => load_input_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => load_input_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => load_input_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => load_input_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => load_input_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => load_input_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => load_input_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        input_stream_din => load_input_U0_input_stream_din,
        input_stream_full_n => input_stream_full_n,
        input_stream_write => load_input_U0_input_stream_write,
        input_r_dout => input_c_dout,
        input_r_empty_n => input_c_empty_n,
        input_r_read => load_input_U0_input_r_read,
        input_size_dout => input_size_c_dout,
        input_size_empty_n => input_size_c_empty_n,
        input_size_read => load_input_U0_input_size_read,
        ap_ext_blocking_n => load_input_U0_ap_ext_blocking_n,
        ap_str_blocking_n => load_input_U0_ap_str_blocking_n,
        ap_int_blocking_n => load_input_U0_ap_int_blocking_n);

    encoding_U0 : component lzw_fpga_encoding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => encoding_U0_ap_start,
        start_full_n => start_for_decoding_U0_full_n,
        ap_done => encoding_U0_ap_done,
        ap_continue => encoding_U0_ap_continue,
        ap_idle => encoding_U0_ap_idle,
        ap_ready => encoding_U0_ap_ready,
        start_out => encoding_U0_start_out,
        start_write => encoding_U0_start_write,
        input_stream_dout => input_stream_dout,
        input_stream_empty_n => input_stream_empty_n,
        input_stream_read => encoding_U0_input_stream_read,
        code_stream_din => encoding_U0_code_stream_din,
        code_stream_full_n => code_stream_full_n,
        code_stream_write => encoding_U0_code_stream_write,
        input_size_dout => input_size_c24_dout,
        input_size_empty_n => input_size_c24_empty_n,
        input_size_read => encoding_U0_input_size_read,
        local_output_code_address0 => encoding_U0_local_output_code_address0,
        local_output_code_ce0 => encoding_U0_local_output_code_ce0,
        local_output_code_we0 => encoding_U0_local_output_code_we0,
        local_output_code_d0 => encoding_U0_local_output_code_d0,
        local_output_size_out_din => encoding_U0_local_output_size_out_din,
        local_output_size_out_full_n => local_output_size_c_full_n,
        local_output_size_out_write => encoding_U0_local_output_size_out_write,
        local_output_size_out1_din => encoding_U0_local_output_size_out1_din,
        local_output_size_out1_full_n => local_output_size_c25_full_n,
        local_output_size_out1_write => encoding_U0_local_output_size_out1_write,
        ap_ext_blocking_n => encoding_U0_ap_ext_blocking_n,
        ap_str_blocking_n => encoding_U0_ap_str_blocking_n,
        ap_int_blocking_n => encoding_U0_ap_int_blocking_n);

    decoding_U0 : component lzw_fpga_decoding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => decoding_U0_ap_start,
        start_full_n => start_for_store_output_U0_full_n,
        ap_done => decoding_U0_ap_done,
        ap_continue => decoding_U0_ap_continue,
        ap_idle => decoding_U0_ap_idle,
        ap_ready => decoding_U0_ap_ready,
        start_out => decoding_U0_start_out,
        start_write => decoding_U0_start_write,
        code_stream_dout => code_stream_dout,
        code_stream_empty_n => code_stream_empty_n,
        code_stream_read => decoding_U0_code_stream_read,
        output_stream_din => decoding_U0_output_stream_din,
        output_stream_full_n => output_stream_full_n,
        output_stream_write => decoding_U0_output_stream_write,
        local_output_size_dout => local_output_size_c_dout,
        local_output_size_empty_n => local_output_size_c_empty_n,
        local_output_size_read => decoding_U0_local_output_size_read,
        local_output_size_out_din => decoding_U0_local_output_size_out_din,
        local_output_size_out_full_n => local_output_size_c26_full_n,
        local_output_size_out_write => decoding_U0_local_output_size_out_write,
        ap_ext_blocking_n => decoding_U0_ap_ext_blocking_n,
        ap_str_blocking_n => decoding_U0_ap_str_blocking_n,
        ap_int_blocking_n => decoding_U0_ap_int_blocking_n);

    store_output_U0 : component lzw_fpga_store_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => store_output_U0_ap_start,
        start_full_n => start_for_Block_split212_proc_U0_full_n,
        ap_done => store_output_U0_ap_done,
        ap_continue => store_output_U0_ap_continue,
        ap_idle => store_output_U0_ap_idle,
        ap_ready => store_output_U0_ap_ready,
        start_out => store_output_U0_start_out,
        start_write => store_output_U0_start_write,
        output_stream_dout => output_stream_dout,
        output_stream_empty_n => output_stream_empty_n,
        output_stream_read => store_output_U0_output_stream_read,
        local_output_address0 => store_output_U0_local_output_address0,
        local_output_ce0 => store_output_U0_local_output_ce0,
        local_output_we0 => store_output_U0_local_output_we0,
        local_output_d0 => store_output_U0_local_output_d0,
        local_output_length_out_din => store_output_U0_local_output_length_out_din,
        local_output_length_out_full_n => local_output_length_c_full_n,
        local_output_length_out_write => store_output_U0_local_output_length_out_write,
        ap_ext_blocking_n => store_output_U0_ap_ext_blocking_n,
        ap_str_blocking_n => store_output_U0_ap_str_blocking_n,
        ap_int_blocking_n => store_output_U0_ap_int_blocking_n);

    copy_output_code_U0 : component lzw_fpga_copy_output_code
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => copy_output_code_U0_ap_start,
        ap_done => copy_output_code_U0_ap_done,
        ap_continue => copy_output_code_U0_ap_continue,
        ap_idle => copy_output_code_U0_ap_idle,
        ap_ready => copy_output_code_U0_ap_ready,
        m_axi_gmem1_AWVALID => copy_output_code_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => gmem1_AWREADY,
        m_axi_gmem1_AWADDR => copy_output_code_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => copy_output_code_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => copy_output_code_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => copy_output_code_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => copy_output_code_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => copy_output_code_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => copy_output_code_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => copy_output_code_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => copy_output_code_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => copy_output_code_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => copy_output_code_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => copy_output_code_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => gmem1_WREADY,
        m_axi_gmem1_WDATA => copy_output_code_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => copy_output_code_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => copy_output_code_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => copy_output_code_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => copy_output_code_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => copy_output_code_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => ap_const_logic_0,
        m_axi_gmem1_ARADDR => copy_output_code_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => copy_output_code_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => copy_output_code_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => copy_output_code_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => copy_output_code_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => copy_output_code_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => copy_output_code_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => copy_output_code_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => copy_output_code_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => copy_output_code_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => copy_output_code_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => ap_const_logic_0,
        m_axi_gmem1_RREADY => copy_output_code_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => ap_const_lv32_0,
        m_axi_gmem1_RLAST => ap_const_logic_0,
        m_axi_gmem1_RID => ap_const_lv1_0,
        m_axi_gmem1_RUSER => ap_const_lv1_0,
        m_axi_gmem1_RRESP => ap_const_lv2_0,
        m_axi_gmem1_BVALID => gmem1_BVALID,
        m_axi_gmem1_BREADY => copy_output_code_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => gmem1_BRESP,
        m_axi_gmem1_BID => gmem1_BID,
        m_axi_gmem1_BUSER => gmem1_BUSER,
        local_output_code_address0 => copy_output_code_U0_local_output_code_address0,
        local_output_code_ce0 => copy_output_code_U0_local_output_code_ce0,
        local_output_code_q0 => local_output_code_t_q0,
        output_code_dout => output_code_c_dout,
        output_code_empty_n => output_code_c_empty_n,
        output_code_read => copy_output_code_U0_output_code_read,
        local_output_size_dout => local_output_size_c25_dout,
        local_output_size_empty_n => local_output_size_c25_empty_n,
        local_output_size_read => copy_output_code_U0_local_output_size_read,
        ap_ext_blocking_n => copy_output_code_U0_ap_ext_blocking_n,
        ap_str_blocking_n => copy_output_code_U0_ap_str_blocking_n,
        ap_int_blocking_n => copy_output_code_U0_ap_int_blocking_n);

    Block_split212_proc_U0 : component lzw_fpga_Block_split212_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split212_proc_U0_ap_start,
        ap_done => Block_split212_proc_U0_ap_done,
        ap_continue => Block_split212_proc_U0_ap_continue,
        ap_idle => Block_split212_proc_U0_ap_idle,
        ap_ready => Block_split212_proc_U0_ap_ready,
        local_output_length_dout => local_output_length_c_dout,
        local_output_length_empty_n => local_output_length_c_empty_n,
        local_output_length_read => Block_split212_proc_U0_local_output_length_read,
        ap_return_0 => Block_split212_proc_U0_ap_return_0,
        ap_return_1 => Block_split212_proc_U0_ap_return_1,
        ap_ext_blocking_n => Block_split212_proc_U0_ap_ext_blocking_n,
        ap_str_blocking_n => Block_split212_proc_U0_ap_str_blocking_n,
        ap_int_blocking_n => Block_split212_proc_U0_ap_int_blocking_n);

    copy_output_U0 : component lzw_fpga_copy_output
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => copy_output_U0_ap_start,
        ap_done => copy_output_U0_ap_done,
        ap_continue => copy_output_U0_ap_continue,
        ap_idle => copy_output_U0_ap_idle,
        ap_ready => copy_output_U0_ap_ready,
        m_axi_gmem2_AWVALID => copy_output_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => gmem2_AWREADY,
        m_axi_gmem2_AWADDR => copy_output_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => copy_output_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => copy_output_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => copy_output_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => copy_output_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => copy_output_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => copy_output_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => copy_output_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => copy_output_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => copy_output_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => copy_output_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => copy_output_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => gmem2_WREADY,
        m_axi_gmem2_WDATA => copy_output_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => copy_output_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => copy_output_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => copy_output_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => copy_output_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => copy_output_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => ap_const_logic_0,
        m_axi_gmem2_ARADDR => copy_output_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => copy_output_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => copy_output_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => copy_output_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => copy_output_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => copy_output_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => copy_output_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => copy_output_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => copy_output_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => copy_output_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => copy_output_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => ap_const_logic_0,
        m_axi_gmem2_RREADY => copy_output_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => ap_const_lv8_0,
        m_axi_gmem2_RLAST => ap_const_logic_0,
        m_axi_gmem2_RID => ap_const_lv1_0,
        m_axi_gmem2_RUSER => ap_const_lv1_0,
        m_axi_gmem2_RRESP => ap_const_lv2_0,
        m_axi_gmem2_BVALID => gmem2_BVALID,
        m_axi_gmem2_BREADY => copy_output_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => gmem2_BRESP,
        m_axi_gmem2_BID => gmem2_BID,
        m_axi_gmem2_BUSER => gmem2_BUSER,
        local_output_address0 => copy_output_U0_local_output_address0,
        local_output_ce0 => copy_output_U0_local_output_ce0,
        local_output_q0 => local_output_t_q0,
        output_r_dout => output_c_dout,
        output_r_empty_n => output_c_empty_n,
        output_r_read => copy_output_U0_output_r_read,
        output_length => local_output_length_load_loc_channel_dout,
        ap_ext_blocking_n => copy_output_U0_ap_ext_blocking_n,
        ap_str_blocking_n => copy_output_U0_ap_str_blocking_n,
        ap_int_blocking_n => copy_output_U0_ap_int_blocking_n);

    Block_split214_proc_U0 : component lzw_fpga_Block_split214_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_split214_proc_U0_ap_start,
        ap_done => Block_split214_proc_U0_ap_done,
        ap_continue => Block_split214_proc_U0_ap_continue,
        ap_idle => Block_split214_proc_U0_ap_idle,
        ap_ready => Block_split214_proc_U0_ap_ready,
        output_size_dout => output_size_c_dout,
        output_size_empty_n => output_size_c_empty_n,
        output_size_read => Block_split214_proc_U0_output_size_read,
        m_axi_gmem_AWVALID => Block_split214_proc_U0_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => Block_split214_proc_U0_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => Block_split214_proc_U0_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => Block_split214_proc_U0_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => Block_split214_proc_U0_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => Block_split214_proc_U0_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => Block_split214_proc_U0_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => Block_split214_proc_U0_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => Block_split214_proc_U0_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => Block_split214_proc_U0_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => Block_split214_proc_U0_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => Block_split214_proc_U0_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => Block_split214_proc_U0_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => Block_split214_proc_U0_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => Block_split214_proc_U0_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => Block_split214_proc_U0_m_axi_gmem_WLAST,
        m_axi_gmem_WID => Block_split214_proc_U0_m_axi_gmem_WID,
        m_axi_gmem_WUSER => Block_split214_proc_U0_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => Block_split214_proc_U0_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => ap_const_logic_0,
        m_axi_gmem_ARADDR => Block_split214_proc_U0_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => Block_split214_proc_U0_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => Block_split214_proc_U0_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => Block_split214_proc_U0_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => Block_split214_proc_U0_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => Block_split214_proc_U0_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => Block_split214_proc_U0_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => Block_split214_proc_U0_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => Block_split214_proc_U0_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => Block_split214_proc_U0_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => Block_split214_proc_U0_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => ap_const_logic_0,
        m_axi_gmem_RREADY => Block_split214_proc_U0_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => ap_const_lv32_0,
        m_axi_gmem_RLAST => ap_const_logic_0,
        m_axi_gmem_RID => ap_const_lv1_0,
        m_axi_gmem_RUSER => ap_const_lv1_0,
        m_axi_gmem_RRESP => ap_const_lv2_0,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => Block_split214_proc_U0_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        local_output_size_dout => local_output_size_c26_dout,
        local_output_size_empty_n => local_output_size_c26_empty_n,
        local_output_size_read => Block_split214_proc_U0_local_output_size_read,
        output_length_dout => output_length_c_dout,
        output_length_empty_n => output_length_c_empty_n,
        output_length_read => Block_split214_proc_U0_output_length_read,
        p_read => local_output_length_load_cast_loc_channel_dout,
        ap_ext_blocking_n => Block_split214_proc_U0_ap_ext_blocking_n,
        ap_str_blocking_n => Block_split214_proc_U0_ap_str_blocking_n,
        ap_int_blocking_n => Block_split214_proc_U0_ap_int_blocking_n);

    input_c_U : component lzw_fpga_fifo_w64_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_input_out_din,
        if_full_n => input_c_full_n,
        if_write => lzw_fpga_entry11_U0_input_out_write,
        if_dout => input_c_dout,
        if_empty_n => input_c_empty_n,
        if_read => load_input_U0_input_r_read);

    input_size_c_U : component lzw_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_input_size_out_din,
        if_full_n => input_size_c_full_n,
        if_write => lzw_fpga_entry11_U0_input_size_out_write,
        if_dout => input_size_c_dout,
        if_empty_n => input_size_c_empty_n,
        if_read => load_input_U0_input_size_read);

    input_size_c24_U : component lzw_fpga_fifo_w32_d3_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_input_size_out1_din,
        if_full_n => input_size_c24_full_n,
        if_write => lzw_fpga_entry11_U0_input_size_out1_write,
        if_dout => input_size_c24_dout,
        if_empty_n => input_size_c24_empty_n,
        if_read => encoding_U0_input_size_read);

    output_code_c_U : component lzw_fpga_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_output_code_out_din,
        if_full_n => output_code_c_full_n,
        if_write => lzw_fpga_entry11_U0_output_code_out_write,
        if_dout => output_code_c_dout,
        if_empty_n => output_code_c_empty_n,
        if_read => copy_output_code_U0_output_code_read);

    output_size_c_U : component lzw_fpga_fifo_w64_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_output_size_out_din,
        if_full_n => output_size_c_full_n,
        if_write => lzw_fpga_entry11_U0_output_size_out_write,
        if_dout => output_size_c_dout,
        if_empty_n => output_size_c_empty_n,
        if_read => Block_split214_proc_U0_output_size_read);

    output_c_U : component lzw_fpga_fifo_w64_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_output_out_din,
        if_full_n => output_c_full_n,
        if_write => lzw_fpga_entry11_U0_output_out_write,
        if_dout => output_c_dout,
        if_empty_n => output_c_empty_n,
        if_read => copy_output_U0_output_r_read);

    output_length_c_U : component lzw_fpga_fifo_w64_d7_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => lzw_fpga_entry11_U0_output_length_out_din,
        if_full_n => output_length_c_full_n,
        if_write => lzw_fpga_entry11_U0_output_length_out_write,
        if_dout => output_length_c_dout,
        if_empty_n => output_length_c_empty_n,
        if_read => Block_split214_proc_U0_output_length_read);

    input_stream_U : component lzw_fpga_fifo_w8_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => load_input_U0_input_stream_din,
        if_full_n => input_stream_full_n,
        if_write => load_input_U0_input_stream_write,
        if_dout => input_stream_dout,
        if_empty_n => input_stream_empty_n,
        if_read => encoding_U0_input_stream_read);

    code_stream_U : component lzw_fpga_fifo_w32_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => encoding_U0_code_stream_din,
        if_full_n => code_stream_full_n,
        if_write => encoding_U0_code_stream_write,
        if_dout => code_stream_dout,
        if_empty_n => code_stream_empty_n,
        if_read => decoding_U0_code_stream_read);

    local_output_size_c_U : component lzw_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => encoding_U0_local_output_size_out_din,
        if_full_n => local_output_size_c_full_n,
        if_write => encoding_U0_local_output_size_out_write,
        if_dout => local_output_size_c_dout,
        if_empty_n => local_output_size_c_empty_n,
        if_read => decoding_U0_local_output_size_read);

    local_output_size_c25_U : component lzw_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => encoding_U0_local_output_size_out1_din,
        if_full_n => local_output_size_c25_full_n,
        if_write => encoding_U0_local_output_size_out1_write,
        if_dout => local_output_size_c25_dout,
        if_empty_n => local_output_size_c25_empty_n,
        if_read => copy_output_code_U0_local_output_size_read);

    output_stream_U : component lzw_fpga_fifo_w8_d16_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => decoding_U0_output_stream_din,
        if_full_n => output_stream_full_n,
        if_write => decoding_U0_output_stream_write,
        if_dout => output_stream_dout,
        if_empty_n => output_stream_empty_n,
        if_read => store_output_U0_output_stream_read);

    local_output_size_c26_U : component lzw_fpga_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => decoding_U0_local_output_size_out_din,
        if_full_n => local_output_size_c26_full_n,
        if_write => decoding_U0_local_output_size_out_write,
        if_dout => local_output_size_c26_dout,
        if_empty_n => local_output_size_c26_empty_n,
        if_read => Block_split214_proc_U0_local_output_size_read);

    local_output_length_c_U : component lzw_fpga_fifo_w9_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => store_output_U0_local_output_length_out_din,
        if_full_n => local_output_length_c_full_n,
        if_write => store_output_U0_local_output_length_out_write,
        if_dout => local_output_length_c_dout,
        if_empty_n => local_output_length_c_empty_n,
        if_read => Block_split212_proc_U0_local_output_length_read);

    local_output_length_load_loc_channel_U : component lzw_fpga_fifo_w9_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split212_proc_U0_ap_return_0,
        if_full_n => local_output_length_load_loc_channel_full_n,
        if_write => ap_channel_done_local_output_length_load_loc_channel,
        if_dout => local_output_length_load_loc_channel_dout,
        if_empty_n => local_output_length_load_loc_channel_empty_n,
        if_read => copy_output_U0_ap_ready);

    local_output_length_load_cast_loc_channel_U : component lzw_fpga_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_split212_proc_U0_ap_return_1,
        if_full_n => local_output_length_load_cast_loc_channel_full_n,
        if_write => ap_channel_done_local_output_length_load_cast_loc_channel,
        if_dout => local_output_length_load_cast_loc_channel_dout,
        if_empty_n => local_output_length_load_cast_loc_channel_empty_n,
        if_read => Block_split214_proc_U0_ap_ready);

    start_for_encoding_U0_U : component lzw_fpga_start_for_encoding_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_encoding_U0_din,
        if_full_n => start_for_encoding_U0_full_n,
        if_write => lzw_fpga_entry11_U0_start_write,
        if_dout => start_for_encoding_U0_dout,
        if_empty_n => start_for_encoding_U0_empty_n,
        if_read => encoding_U0_ap_ready);

    start_for_decoding_U0_U : component lzw_fpga_start_for_decoding_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_decoding_U0_din,
        if_full_n => start_for_decoding_U0_full_n,
        if_write => encoding_U0_start_write,
        if_dout => start_for_decoding_U0_dout,
        if_empty_n => start_for_decoding_U0_empty_n,
        if_read => decoding_U0_ap_ready);

    start_for_store_output_U0_U : component lzw_fpga_start_for_store_output_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_store_output_U0_din,
        if_full_n => start_for_store_output_U0_full_n,
        if_write => decoding_U0_start_write,
        if_dout => start_for_store_output_U0_dout,
        if_empty_n => start_for_store_output_U0_empty_n,
        if_read => store_output_U0_ap_ready);

    start_for_Block_split212_proc_U0_U : component lzw_fpga_start_for_Block_split212_proc_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Block_split212_proc_U0_din,
        if_full_n => start_for_Block_split212_proc_U0_full_n,
        if_write => store_output_U0_start_write,
        if_dout => start_for_Block_split212_proc_U0_dout,
        if_empty_n => start_for_Block_split212_proc_U0_empty_n,
        if_read => Block_split212_proc_U0_ap_ready);





    ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel <= ap_const_logic_0;
            else
                if (((Block_split212_proc_U0_ap_done and Block_split212_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel <= ap_sync_channel_write_local_output_length_load_cast_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_local_output_length_load_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_local_output_length_load_loc_channel <= ap_const_logic_0;
            else
                if (((Block_split212_proc_U0_ap_done and Block_split212_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_local_output_length_load_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_local_output_length_load_loc_channel <= ap_sync_channel_write_local_output_length_load_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_load_input_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_load_input_U0_ap_ready <= ap_sync_load_input_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_lzw_fpga_entry11_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_lzw_fpga_entry11_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_lzw_fpga_entry11_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_lzw_fpga_entry11_U0_ap_ready <= ap_sync_lzw_fpga_entry11_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_ext_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ext_blocking_n_reg <= ap_ext_blocking_n;
        end if;
    end process;

    ap_int_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_int_blocking_n_reg <= ap_int_blocking_n;
        end if;
    end process;

    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;

    ap_str_blocking_n_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_str_blocking_n_reg <= ap_str_blocking_n;
        end if;
    end process;
    Block_split212_proc_U0_ap_continue <= (ap_sync_channel_write_local_output_length_load_loc_channel and ap_sync_channel_write_local_output_length_load_cast_loc_channel);
    Block_split212_proc_U0_ap_start <= start_for_Block_split212_proc_U0_empty_n;
    Block_split212_proc_U0_start_full_n <= ap_const_logic_1;
    Block_split212_proc_U0_start_write <= ap_const_logic_0;
    Block_split214_proc_U0_ap_continue <= ap_sync_continue;
    Block_split214_proc_U0_ap_start <= local_output_length_load_cast_loc_channel_empty_n;
    Block_split214_proc_U0_start_full_n <= ap_const_logic_1;
    Block_split214_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_local_output <= store_output_U0_ap_done;
    ap_channel_done_local_output_code <= encoding_U0_ap_done;
    ap_channel_done_local_output_length_load_cast_loc_channel <= ((ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel xor ap_const_logic_1) and Block_split212_proc_U0_ap_done);
    ap_channel_done_local_output_length_load_loc_channel <= ((ap_sync_reg_channel_write_local_output_length_load_loc_channel xor ap_const_logic_1) and Block_split212_proc_U0_ap_done);
    ap_done <= ap_sync_done;
    ap_ext_blocking_cur_n <= ap_const_logic_1;
    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_ext_blocking_cur_n);
    ap_ext_blocking_sub_n <= (store_output_U0_ap_ext_blocking_n and lzw_fpga_entry11_U0_ap_ext_blocking_n and load_input_U0_ap_ext_blocking_n and encoding_U0_ap_ext_blocking_n and decoding_U0_ap_ext_blocking_n and copy_output_code_U0_ap_ext_blocking_n and copy_output_U0_ap_ext_blocking_n and Block_split214_proc_U0_ap_ext_blocking_n and Block_split212_proc_U0_ap_ext_blocking_n);
    ap_idle <= (store_output_U0_ap_idle and lzw_fpga_entry11_U0_ap_idle and load_input_U0_ap_idle and (local_output_code_t_empty_n xor ap_const_logic_1) and (local_output_length_load_cast_loc_channel_empty_n xor ap_const_logic_1) and (local_output_length_load_loc_channel_empty_n xor ap_const_logic_1) and (local_output_t_empty_n xor ap_const_logic_1) and encoding_U0_ap_idle and decoding_U0_ap_idle and copy_output_code_U0_ap_idle and copy_output_U0_ap_idle and Block_split214_proc_U0_ap_idle and Block_split212_proc_U0_ap_idle);
    ap_int_blocking_cur_n <= ap_const_logic_1;
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);
    ap_int_blocking_sub_n <= (store_output_U0_ap_int_blocking_n and lzw_fpga_entry11_U0_ap_int_blocking_n and load_input_U0_ap_int_blocking_n and encoding_U0_ap_int_blocking_n and decoding_U0_ap_int_blocking_n and copy_output_code_U0_ap_int_blocking_n and copy_output_U0_ap_int_blocking_n and Block_split214_proc_U0_ap_int_blocking_n and Block_split212_proc_U0_ap_int_blocking_n);
    ap_ready <= ap_sync_ready;
    ap_str_blocking_cur_n <= ap_const_logic_1;
    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_str_blocking_cur_n);
    ap_str_blocking_sub_n <= (store_output_U0_ap_str_blocking_n and lzw_fpga_entry11_U0_ap_str_blocking_n and load_input_U0_ap_str_blocking_n and encoding_U0_ap_str_blocking_n and decoding_U0_ap_str_blocking_n and copy_output_code_U0_ap_str_blocking_n and copy_output_U0_ap_str_blocking_n and Block_split214_proc_U0_ap_str_blocking_n and Block_split212_proc_U0_ap_str_blocking_n);
    ap_sync_channel_write_local_output_length_load_cast_loc_channel <= ((local_output_length_load_cast_loc_channel_full_n and ap_channel_done_local_output_length_load_cast_loc_channel) or ap_sync_reg_channel_write_local_output_length_load_cast_loc_channel);
    ap_sync_channel_write_local_output_length_load_loc_channel <= ((local_output_length_load_loc_channel_full_n and ap_channel_done_local_output_length_load_loc_channel) or ap_sync_reg_channel_write_local_output_length_load_loc_channel);
    ap_sync_continue <= (ap_sync_done and ap_continue);
    ap_sync_done <= (copy_output_code_U0_ap_done and copy_output_U0_ap_done and Block_split214_proc_U0_ap_done);
    ap_sync_load_input_U0_ap_ready <= (load_input_U0_ap_ready or ap_sync_reg_load_input_U0_ap_ready);
    ap_sync_lzw_fpga_entry11_U0_ap_ready <= (lzw_fpga_entry11_U0_ap_ready or ap_sync_reg_lzw_fpga_entry11_U0_ap_ready);
    ap_sync_ready <= (ap_sync_lzw_fpga_entry11_U0_ap_ready and ap_sync_load_input_U0_ap_ready);
    copy_output_U0_ap_continue <= ap_sync_continue;
    copy_output_U0_ap_start <= (local_output_t_empty_n and local_output_length_load_loc_channel_empty_n);
    copy_output_U0_start_full_n <= ap_const_logic_1;
    copy_output_U0_start_write <= ap_const_logic_0;
    copy_output_code_U0_ap_continue <= ap_sync_continue;
    copy_output_code_U0_ap_start <= local_output_code_t_empty_n;
    copy_output_code_U0_start_full_n <= ap_const_logic_1;
    copy_output_code_U0_start_write <= ap_const_logic_0;
    decoding_U0_ap_continue <= ap_const_logic_1;
    decoding_U0_ap_start <= start_for_decoding_U0_empty_n;
    encoding_U0_ap_continue <= local_output_code_i_full_n;
    encoding_U0_ap_start <= start_for_encoding_U0_empty_n;
    encoding_U0_local_output_code_full_n <= local_output_code_i_full_n;
    event_done <= ap_done;
    load_input_U0_ap_continue <= ap_const_logic_1;
    load_input_U0_ap_start <= ((ap_sync_reg_load_input_U0_ap_ready xor ap_const_logic_1) and ap_start);
    load_input_U0_start_full_n <= ap_const_logic_1;
    load_input_U0_start_write <= ap_const_logic_0;
    lzw_fpga_entry11_U0_ap_continue <= ap_const_logic_1;
    lzw_fpga_entry11_U0_ap_start <= ((ap_sync_reg_lzw_fpga_entry11_U0_ap_ready xor ap_const_logic_1) and ap_start);

    stall_done_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_0) and (ap_ext_blocking_n = ap_const_logic_1))) then 
            stall_done_ext <= ap_const_logic_1;
        else 
            stall_done_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_0) and (ap_int_blocking_n = ap_const_logic_1))) then 
            stall_done_int <= ap_const_logic_1;
        else 
            stall_done_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_done_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_0) and (ap_str_blocking_n = ap_const_logic_1))) then 
            stall_done_str <= ap_const_logic_1;
        else 
            stall_done_str <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_ext_assign_proc : process(ap_ext_blocking_n, ap_ext_blocking_n_reg)
    begin
        if (((ap_ext_blocking_n_reg = ap_const_logic_1) and (ap_ext_blocking_n = ap_const_logic_0))) then 
            stall_start_ext <= ap_const_logic_1;
        else 
            stall_start_ext <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_int_assign_proc : process(ap_int_blocking_n, ap_int_blocking_n_reg)
    begin
        if (((ap_int_blocking_n_reg = ap_const_logic_1) and (ap_int_blocking_n = ap_const_logic_0))) then 
            stall_start_int <= ap_const_logic_1;
        else 
            stall_start_int <= ap_const_logic_0;
        end if; 
    end process;


    stall_start_str_assign_proc : process(ap_str_blocking_n, ap_str_blocking_n_reg)
    begin
        if (((ap_str_blocking_n_reg = ap_const_logic_1) and (ap_str_blocking_n = ap_const_logic_0))) then 
            stall_start_str <= ap_const_logic_1;
        else 
            stall_start_str <= ap_const_logic_0;
        end if; 
    end process;

    start_for_Block_split212_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_decoding_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_encoding_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_store_output_U0_din <= (0=>ap_const_logic_1, others=>'-');
    store_output_U0_ap_continue <= local_output_i_full_n;
    store_output_U0_ap_start <= start_for_store_output_U0_empty_n;
    store_output_U0_local_output_full_n <= local_output_i_full_n;
end behav;
