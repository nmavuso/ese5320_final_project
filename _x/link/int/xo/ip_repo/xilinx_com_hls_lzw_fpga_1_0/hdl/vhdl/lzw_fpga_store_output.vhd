-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lzw_fpga_store_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC;
    output_stream_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    output_stream_empty_n : IN STD_LOGIC;
    output_stream_read : OUT STD_LOGIC;
    local_output_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_output_ce0 : OUT STD_LOGIC;
    local_output_we0 : OUT STD_LOGIC;
    local_output_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_output_length_out_din : OUT STD_LOGIC_VECTOR (8 downto 0);
    local_output_length_out_full_n : IN STD_LOGIC;
    local_output_length_out_write : OUT STD_LOGIC );
end;


architecture behav of lzw_fpga_store_output is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_100 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal internal_ap_ready : STD_LOGIC;
    signal output_stream_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_118_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_nbreadreq_fu_58_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal local_output_length_out_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_fu_126_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_predicate_op17_read_state2 : BOOLEAN;
    signal ap_block_state2 : BOOLEAN;
    signal out_index_1_reg_93 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal local_output_length_dc_0_reg_105 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln167_fu_132_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_condition_82 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((local_output_length_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    local_output_length_dc_0_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_82)) then
                if ((tmp_fu_118_p3 = ap_const_lv1_1)) then 
                    local_output_length_dc_0_reg_105 <= ap_const_lv9_100;
                elsif (((tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_0) and (tmp_fu_118_p3 = ap_const_lv1_0))) then 
                    local_output_length_dc_0_reg_105 <= out_index_1_reg_93;
                end if;
            end if; 
        end if;
    end process;

    out_index_1_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (tmp_fu_118_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                out_index_1_reg_93 <= i_fu_126_p2;
            elsif ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_index_1_reg_93 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (real_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, output_stream_empty_n, local_output_length_out_full_n, ap_CS_fsm_state2, tmp_fu_118_p3, tmp_i_nbreadreq_fu_58_p3, ap_CS_fsm_state3, ap_predicate_op17_read_state2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (tmp_fu_118_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2) and ((tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_0) or (tmp_fu_118_p3 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((local_output_length_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_block_state1_assign_proc : process(real_start, ap_done_reg)
    begin
                ap_block_state1 <= ((real_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_block_state2_assign_proc : process(output_stream_empty_n, ap_predicate_op17_read_state2)
    begin
                ap_block_state2 <= ((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0));
    end process;


    ap_condition_82_assign_proc : process(output_stream_empty_n, ap_CS_fsm_state2, ap_predicate_op17_read_state2)
    begin
                ap_condition_82 <= (not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2));
    end process;


    ap_done_assign_proc : process(ap_done_reg, local_output_length_out_full_n, ap_CS_fsm_state3)
    begin
        if (((local_output_length_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(real_start, ap_CS_fsm_state1)
    begin
        if (((real_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_op17_read_state2_assign_proc : process(tmp_fu_118_p3, tmp_i_nbreadreq_fu_58_p3)
    begin
                ap_predicate_op17_read_state2 <= ((tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (tmp_fu_118_p3 = ap_const_lv1_0));
    end process;

    ap_ready <= internal_ap_ready;
    i_fu_126_p2 <= std_logic_vector(unsigned(out_index_1_reg_93) + unsigned(ap_const_lv9_1));

    internal_ap_ready_assign_proc : process(local_output_length_out_full_n, ap_CS_fsm_state3)
    begin
        if (((local_output_length_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            internal_ap_ready <= ap_const_logic_1;
        else 
            internal_ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    local_output_address0 <= zext_ln167_fu_132_p1(8 - 1 downto 0);

    local_output_ce0_assign_proc : process(output_stream_empty_n, ap_CS_fsm_state2, ap_predicate_op17_read_state2)
    begin
        if ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            local_output_ce0 <= ap_const_logic_1;
        else 
            local_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_output_d0 <= output_stream_dout;

    local_output_length_out_blk_n_assign_proc : process(local_output_length_out_full_n, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            local_output_length_out_blk_n <= local_output_length_out_full_n;
        else 
            local_output_length_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    local_output_length_out_din <= local_output_length_dc_0_reg_105;

    local_output_length_out_write_assign_proc : process(local_output_length_out_full_n, ap_CS_fsm_state3)
    begin
        if (((local_output_length_out_full_n = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            local_output_length_out_write <= ap_const_logic_1;
        else 
            local_output_length_out_write <= ap_const_logic_0;
        end if; 
    end process;


    local_output_we0_assign_proc : process(output_stream_empty_n, ap_CS_fsm_state2, tmp_fu_118_p3, tmp_i_nbreadreq_fu_58_p3, ap_predicate_op17_read_state2)
    begin
        if ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (tmp_fu_118_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            local_output_we0 <= ap_const_logic_1;
        else 
            local_output_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_stream_blk_n_assign_proc : process(output_stream_empty_n, ap_CS_fsm_state2, tmp_fu_118_p3, tmp_i_nbreadreq_fu_58_p3)
    begin
        if (((tmp_i_nbreadreq_fu_58_p3 = ap_const_lv1_1) and (tmp_fu_118_p3 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_stream_blk_n <= output_stream_empty_n;
        else 
            output_stream_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    output_stream_read_assign_proc : process(output_stream_empty_n, ap_CS_fsm_state2, ap_predicate_op17_read_state2)
    begin
        if ((not(((ap_predicate_op17_read_state2 = ap_const_boolean_1) and (output_stream_empty_n = ap_const_logic_0))) and (ap_predicate_op17_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            output_stream_read <= ap_const_logic_1;
        else 
            output_stream_read <= ap_const_logic_0;
        end if; 
    end process;


    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_once_reg = ap_const_logic_0) and (start_full_n = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_118_p3 <= out_index_1_reg_93(8 downto 8);
    tmp_i_nbreadreq_fu_58_p3 <= (0=>(output_stream_empty_n), others=>'-');
    zext_ln167_fu_132_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index_1_reg_93),64));
end behav;
