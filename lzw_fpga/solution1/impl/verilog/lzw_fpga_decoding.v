// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
// Version: 2020.2
// Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module lzw_fpga_decoding (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY,
        m_axi_gmem_AWADDR,
        m_axi_gmem_AWID,
        m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID,
        m_axi_gmem_WREADY,
        m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST,
        m_axi_gmem_WID,
        m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY,
        m_axi_gmem_ARADDR,
        m_axi_gmem_ARID,
        m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID,
        m_axi_gmem_RREADY,
        m_axi_gmem_RDATA,
        m_axi_gmem_RLAST,
        m_axi_gmem_RID,
        m_axi_gmem_RUSER,
        m_axi_gmem_RRESP,
        m_axi_gmem_BVALID,
        m_axi_gmem_BREADY,
        m_axi_gmem_BRESP,
        m_axi_gmem_BID,
        m_axi_gmem_BUSER,
        encoded_data,
        encoded_size,
        output_r
);

parameter    ap_ST_fsm_state1 = 248'd1;
parameter    ap_ST_fsm_state2 = 248'd2;
parameter    ap_ST_fsm_state3 = 248'd4;
parameter    ap_ST_fsm_state4 = 248'd8;
parameter    ap_ST_fsm_state5 = 248'd16;
parameter    ap_ST_fsm_state6 = 248'd32;
parameter    ap_ST_fsm_state7 = 248'd64;
parameter    ap_ST_fsm_state8 = 248'd128;
parameter    ap_ST_fsm_state9 = 248'd256;
parameter    ap_ST_fsm_state10 = 248'd512;
parameter    ap_ST_fsm_state11 = 248'd1024;
parameter    ap_ST_fsm_state12 = 248'd2048;
parameter    ap_ST_fsm_state13 = 248'd4096;
parameter    ap_ST_fsm_state14 = 248'd8192;
parameter    ap_ST_fsm_state15 = 248'd16384;
parameter    ap_ST_fsm_state16 = 248'd32768;
parameter    ap_ST_fsm_state17 = 248'd65536;
parameter    ap_ST_fsm_state18 = 248'd131072;
parameter    ap_ST_fsm_state19 = 248'd262144;
parameter    ap_ST_fsm_state20 = 248'd524288;
parameter    ap_ST_fsm_state21 = 248'd1048576;
parameter    ap_ST_fsm_state22 = 248'd2097152;
parameter    ap_ST_fsm_state23 = 248'd4194304;
parameter    ap_ST_fsm_state24 = 248'd8388608;
parameter    ap_ST_fsm_state25 = 248'd16777216;
parameter    ap_ST_fsm_state26 = 248'd33554432;
parameter    ap_ST_fsm_state27 = 248'd67108864;
parameter    ap_ST_fsm_state28 = 248'd134217728;
parameter    ap_ST_fsm_state29 = 248'd268435456;
parameter    ap_ST_fsm_state30 = 248'd536870912;
parameter    ap_ST_fsm_state31 = 248'd1073741824;
parameter    ap_ST_fsm_state32 = 248'd2147483648;
parameter    ap_ST_fsm_state33 = 248'd4294967296;
parameter    ap_ST_fsm_state34 = 248'd8589934592;
parameter    ap_ST_fsm_state35 = 248'd17179869184;
parameter    ap_ST_fsm_state36 = 248'd34359738368;
parameter    ap_ST_fsm_state37 = 248'd68719476736;
parameter    ap_ST_fsm_state38 = 248'd137438953472;
parameter    ap_ST_fsm_state39 = 248'd274877906944;
parameter    ap_ST_fsm_state40 = 248'd549755813888;
parameter    ap_ST_fsm_state41 = 248'd1099511627776;
parameter    ap_ST_fsm_state42 = 248'd2199023255552;
parameter    ap_ST_fsm_state43 = 248'd4398046511104;
parameter    ap_ST_fsm_state44 = 248'd8796093022208;
parameter    ap_ST_fsm_state45 = 248'd17592186044416;
parameter    ap_ST_fsm_state46 = 248'd35184372088832;
parameter    ap_ST_fsm_state47 = 248'd70368744177664;
parameter    ap_ST_fsm_state48 = 248'd140737488355328;
parameter    ap_ST_fsm_state49 = 248'd281474976710656;
parameter    ap_ST_fsm_state50 = 248'd562949953421312;
parameter    ap_ST_fsm_state51 = 248'd1125899906842624;
parameter    ap_ST_fsm_state52 = 248'd2251799813685248;
parameter    ap_ST_fsm_state53 = 248'd4503599627370496;
parameter    ap_ST_fsm_state54 = 248'd9007199254740992;
parameter    ap_ST_fsm_state55 = 248'd18014398509481984;
parameter    ap_ST_fsm_state56 = 248'd36028797018963968;
parameter    ap_ST_fsm_state57 = 248'd72057594037927936;
parameter    ap_ST_fsm_state58 = 248'd144115188075855872;
parameter    ap_ST_fsm_state59 = 248'd288230376151711744;
parameter    ap_ST_fsm_state60 = 248'd576460752303423488;
parameter    ap_ST_fsm_state61 = 248'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 248'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 248'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 248'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 248'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 248'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 248'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 248'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 248'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 248'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 248'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 248'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 248'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 248'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 248'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 248'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 248'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 248'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 248'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 248'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 248'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 248'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 248'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 248'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 248'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 248'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 248'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 248'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 248'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 248'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 248'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 248'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 248'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 248'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 248'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 248'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 248'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 248'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 248'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 248'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 248'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 248'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 248'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 248'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 248'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 248'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 248'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 248'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 248'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 248'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 248'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 248'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 248'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 248'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 248'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 248'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 248'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 248'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 248'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 248'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 248'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 248'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 248'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 248'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 248'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 248'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 248'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 248'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 248'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 248'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 248'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 248'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 248'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 248'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 248'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 248'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 248'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 248'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 248'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 248'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 248'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 248'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 248'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 248'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 248'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 248'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 248'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 248'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 248'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 248'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 248'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 248'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 248'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 248'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 248'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 248'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 248'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 248'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 248'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 248'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 248'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 248'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_state163 = 248'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state164 = 248'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_state165 = 248'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_state166 = 248'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_state167 = 248'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_state168 = 248'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state169 = 248'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state170 = 248'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state171 = 248'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state172 = 248'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state173 = 248'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state174 = 248'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state175 = 248'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state176 = 248'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state177 = 248'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state178 = 248'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state179 = 248'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state180 = 248'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state181 = 248'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state182 = 248'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state183 = 248'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state184 = 248'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state185 = 248'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state186 = 248'd49039857307708443467467104868809893875799651909875269632;
parameter    ap_ST_fsm_state187 = 248'd98079714615416886934934209737619787751599303819750539264;
parameter    ap_ST_fsm_state188 = 248'd196159429230833773869868419475239575503198607639501078528;
parameter    ap_ST_fsm_state189 = 248'd392318858461667547739736838950479151006397215279002157056;
parameter    ap_ST_fsm_state190 = 248'd784637716923335095479473677900958302012794430558004314112;
parameter    ap_ST_fsm_state191 = 248'd1569275433846670190958947355801916604025588861116008628224;
parameter    ap_ST_fsm_state192 = 248'd3138550867693340381917894711603833208051177722232017256448;
parameter    ap_ST_fsm_state193 = 248'd6277101735386680763835789423207666416102355444464034512896;
parameter    ap_ST_fsm_state194 = 248'd12554203470773361527671578846415332832204710888928069025792;
parameter    ap_ST_fsm_state195 = 248'd25108406941546723055343157692830665664409421777856138051584;
parameter    ap_ST_fsm_state196 = 248'd50216813883093446110686315385661331328818843555712276103168;
parameter    ap_ST_fsm_state197 = 248'd100433627766186892221372630771322662657637687111424552206336;
parameter    ap_ST_fsm_state198 = 248'd200867255532373784442745261542645325315275374222849104412672;
parameter    ap_ST_fsm_state199 = 248'd401734511064747568885490523085290650630550748445698208825344;
parameter    ap_ST_fsm_state200 = 248'd803469022129495137770981046170581301261101496891396417650688;
parameter    ap_ST_fsm_state201 = 248'd1606938044258990275541962092341162602522202993782792835301376;
parameter    ap_ST_fsm_state202 = 248'd3213876088517980551083924184682325205044405987565585670602752;
parameter    ap_ST_fsm_state203 = 248'd6427752177035961102167848369364650410088811975131171341205504;
parameter    ap_ST_fsm_state204 = 248'd12855504354071922204335696738729300820177623950262342682411008;
parameter    ap_ST_fsm_state205 = 248'd25711008708143844408671393477458601640355247900524685364822016;
parameter    ap_ST_fsm_state206 = 248'd51422017416287688817342786954917203280710495801049370729644032;
parameter    ap_ST_fsm_state207 = 248'd102844034832575377634685573909834406561420991602098741459288064;
parameter    ap_ST_fsm_state208 = 248'd205688069665150755269371147819668813122841983204197482918576128;
parameter    ap_ST_fsm_state209 = 248'd411376139330301510538742295639337626245683966408394965837152256;
parameter    ap_ST_fsm_state210 = 248'd822752278660603021077484591278675252491367932816789931674304512;
parameter    ap_ST_fsm_state211 = 248'd1645504557321206042154969182557350504982735865633579863348609024;
parameter    ap_ST_fsm_state212 = 248'd3291009114642412084309938365114701009965471731267159726697218048;
parameter    ap_ST_fsm_state213 = 248'd6582018229284824168619876730229402019930943462534319453394436096;
parameter    ap_ST_fsm_state214 = 248'd13164036458569648337239753460458804039861886925068638906788872192;
parameter    ap_ST_fsm_state215 = 248'd26328072917139296674479506920917608079723773850137277813577744384;
parameter    ap_ST_fsm_state216 = 248'd52656145834278593348959013841835216159447547700274555627155488768;
parameter    ap_ST_fsm_state217 = 248'd105312291668557186697918027683670432318895095400549111254310977536;
parameter    ap_ST_fsm_state218 = 248'd210624583337114373395836055367340864637790190801098222508621955072;
parameter    ap_ST_fsm_state219 = 248'd421249166674228746791672110734681729275580381602196445017243910144;
parameter    ap_ST_fsm_state220 = 248'd842498333348457493583344221469363458551160763204392890034487820288;
parameter    ap_ST_fsm_state221 = 248'd1684996666696914987166688442938726917102321526408785780068975640576;
parameter    ap_ST_fsm_state222 = 248'd3369993333393829974333376885877453834204643052817571560137951281152;
parameter    ap_ST_fsm_state223 = 248'd6739986666787659948666753771754907668409286105635143120275902562304;
parameter    ap_ST_fsm_state224 = 248'd13479973333575319897333507543509815336818572211270286240551805124608;
parameter    ap_ST_fsm_state225 = 248'd26959946667150639794667015087019630673637144422540572481103610249216;
parameter    ap_ST_fsm_state226 = 248'd53919893334301279589334030174039261347274288845081144962207220498432;
parameter    ap_ST_fsm_state227 = 248'd107839786668602559178668060348078522694548577690162289924414440996864;
parameter    ap_ST_fsm_state228 = 248'd215679573337205118357336120696157045389097155380324579848828881993728;
parameter    ap_ST_fsm_state229 = 248'd431359146674410236714672241392314090778194310760649159697657763987456;
parameter    ap_ST_fsm_state230 = 248'd862718293348820473429344482784628181556388621521298319395315527974912;
parameter    ap_ST_fsm_state231 = 248'd1725436586697640946858688965569256363112777243042596638790631055949824;
parameter    ap_ST_fsm_state232 = 248'd3450873173395281893717377931138512726225554486085193277581262111899648;
parameter    ap_ST_fsm_state233 = 248'd6901746346790563787434755862277025452451108972170386555162524223799296;
parameter    ap_ST_fsm_state234 = 248'd13803492693581127574869511724554050904902217944340773110325048447598592;
parameter    ap_ST_fsm_state235 = 248'd27606985387162255149739023449108101809804435888681546220650096895197184;
parameter    ap_ST_fsm_state236 = 248'd55213970774324510299478046898216203619608871777363092441300193790394368;
parameter    ap_ST_fsm_state237 = 248'd110427941548649020598956093796432407239217743554726184882600387580788736;
parameter    ap_ST_fsm_state238 = 248'd220855883097298041197912187592864814478435487109452369765200775161577472;
parameter    ap_ST_fsm_state239 = 248'd441711766194596082395824375185729628956870974218904739530401550323154944;
parameter    ap_ST_fsm_state240 = 248'd883423532389192164791648750371459257913741948437809479060803100646309888;
parameter    ap_ST_fsm_state241 = 248'd1766847064778384329583297500742918515827483896875618958121606201292619776;
parameter    ap_ST_fsm_state242 = 248'd3533694129556768659166595001485837031654967793751237916243212402585239552;
parameter    ap_ST_fsm_state243 = 248'd7067388259113537318333190002971674063309935587502475832486424805170479104;
parameter    ap_ST_fsm_state244 = 248'd14134776518227074636666380005943348126619871175004951664972849610340958208;
parameter    ap_ST_fsm_state245 = 248'd28269553036454149273332760011886696253239742350009903329945699220681916416;
parameter    ap_ST_fsm_state246 = 248'd56539106072908298546665520023773392506479484700019806659891398441363832832;
parameter    ap_ST_fsm_state247 = 248'd113078212145816597093331040047546785012958969400039613319782796882727665664;
parameter    ap_ST_fsm_state248 = 248'd226156424291633194186662080095093570025917938800079226639565593765455331328;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_gmem_AWVALID;
input   m_axi_gmem_AWREADY;
output  [63:0] m_axi_gmem_AWADDR;
output  [0:0] m_axi_gmem_AWID;
output  [31:0] m_axi_gmem_AWLEN;
output  [2:0] m_axi_gmem_AWSIZE;
output  [1:0] m_axi_gmem_AWBURST;
output  [1:0] m_axi_gmem_AWLOCK;
output  [3:0] m_axi_gmem_AWCACHE;
output  [2:0] m_axi_gmem_AWPROT;
output  [3:0] m_axi_gmem_AWQOS;
output  [3:0] m_axi_gmem_AWREGION;
output  [0:0] m_axi_gmem_AWUSER;
output   m_axi_gmem_WVALID;
input   m_axi_gmem_WREADY;
output  [31:0] m_axi_gmem_WDATA;
output  [3:0] m_axi_gmem_WSTRB;
output   m_axi_gmem_WLAST;
output  [0:0] m_axi_gmem_WID;
output  [0:0] m_axi_gmem_WUSER;
output   m_axi_gmem_ARVALID;
input   m_axi_gmem_ARREADY;
output  [63:0] m_axi_gmem_ARADDR;
output  [0:0] m_axi_gmem_ARID;
output  [31:0] m_axi_gmem_ARLEN;
output  [2:0] m_axi_gmem_ARSIZE;
output  [1:0] m_axi_gmem_ARBURST;
output  [1:0] m_axi_gmem_ARLOCK;
output  [3:0] m_axi_gmem_ARCACHE;
output  [2:0] m_axi_gmem_ARPROT;
output  [3:0] m_axi_gmem_ARQOS;
output  [3:0] m_axi_gmem_ARREGION;
output  [0:0] m_axi_gmem_ARUSER;
input   m_axi_gmem_RVALID;
output   m_axi_gmem_RREADY;
input  [31:0] m_axi_gmem_RDATA;
input   m_axi_gmem_RLAST;
input  [0:0] m_axi_gmem_RID;
input  [0:0] m_axi_gmem_RUSER;
input  [1:0] m_axi_gmem_RRESP;
input   m_axi_gmem_BVALID;
output   m_axi_gmem_BREADY;
input  [1:0] m_axi_gmem_BRESP;
input  [0:0] m_axi_gmem_BID;
input  [0:0] m_axi_gmem_BUSER;
input  [63:0] encoded_data;
input  [31:0] encoded_size;
input  [63:0] output_r;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_gmem_AWVALID;
reg[63:0] m_axi_gmem_AWADDR;
reg[0:0] m_axi_gmem_AWID;
reg[31:0] m_axi_gmem_AWLEN;
reg[2:0] m_axi_gmem_AWSIZE;
reg[1:0] m_axi_gmem_AWBURST;
reg[1:0] m_axi_gmem_AWLOCK;
reg[3:0] m_axi_gmem_AWCACHE;
reg[2:0] m_axi_gmem_AWPROT;
reg[3:0] m_axi_gmem_AWQOS;
reg[3:0] m_axi_gmem_AWREGION;
reg[0:0] m_axi_gmem_AWUSER;
reg m_axi_gmem_WVALID;
reg[31:0] m_axi_gmem_WDATA;
reg[3:0] m_axi_gmem_WSTRB;
reg m_axi_gmem_WLAST;
reg[0:0] m_axi_gmem_WID;
reg[0:0] m_axi_gmem_WUSER;
reg m_axi_gmem_ARVALID;
reg[63:0] m_axi_gmem_ARADDR;
reg m_axi_gmem_RREADY;
reg m_axi_gmem_BREADY;

(* fsm_encoding = "none" *) reg   [247:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    gmem_blk_n_AR;
wire    ap_CS_fsm_state5;
reg    gmem_blk_n_R;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state156;
reg    gmem_blk_n_AW;
wire    ap_CS_fsm_state179;
reg    gmem_blk_n_W;
wire    ap_CS_fsm_state180;
reg    gmem_blk_n_B;
wire    ap_CS_fsm_state248;
wire   [8:0] i_fu_528_p2;
wire    ap_CS_fsm_state2;
wire   [10:0] empty_49_fu_573_p2;
wire    ap_CS_fsm_state4;
reg   [31:0] current_code_reg_1117;
reg   [23:0] tmp_4_reg_1122;
wire    ap_CS_fsm_state76;
wire   [0:0] icmp_ln122_fu_620_p2;
reg   [0:0] icmp_ln122_reg_1132;
wire   [11:0] zext_ln123_fu_628_p1;
reg   [11:0] zext_ln123_reg_1136;
wire    ap_CS_fsm_state80;
wire   [0:0] icmp_ln27_2_fu_643_p2;
reg   [0:0] icmp_ln27_2_reg_1146;
wire   [63:0] add_ln28_fu_649_p2;
wire    ap_CS_fsm_state81;
wire   [31:0] trunc_ln118_fu_660_p1;
wire    ap_CS_fsm_state82;
wire   [0:0] icmp_ln131_fu_673_p2;
reg   [0:0] icmp_ln131_reg_1170;
wire   [0:0] icmp_ln131_1_fu_688_p2;
reg   [0:0] icmp_ln131_1_reg_1181;
wire    ap_CS_fsm_state83;
wire   [10:0] empty_52_fu_693_p2;
wire    ap_CS_fsm_state84;
reg   [63:0] gmem_addr_7_reg_1193;
wire    ap_CS_fsm_state85;
reg   [31:0] current_code_1_reg_1199;
wire   [0:0] and_ln135_fu_765_p2;
reg   [0:0] and_ln135_reg_1207;
wire    ap_CS_fsm_state157;
wire   [0:0] icmp_ln137_fu_771_p2;
reg   [0:0] icmp_ln137_reg_1211;
wire   [11:0] trunc_ln136_fu_776_p1;
reg   [11:0] trunc_ln136_reg_1215;
wire    ap_CS_fsm_state158;
wire   [0:0] icmp_ln27_4_fu_790_p2;
reg   [0:0] icmp_ln27_4_reg_1225;
wire   [63:0] add_ln28_1_fu_796_p2;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state165;
wire   [0:0] icmp_ln27_6_fu_832_p2;
reg   [0:0] icmp_ln27_6_reg_1243;
wire   [63:0] add_ln28_2_fu_838_p2;
wire    ap_CS_fsm_state166;
wire   [31:0] out_index_7_fu_859_p2;
reg   [31:0] out_index_7_reg_1256;
wire    ap_CS_fsm_state167;
wire   [63:0] add_ln150_fu_875_p2;
reg   [63:0] add_ln150_reg_1264;
wire   [0:0] icmp_ln146_fu_865_p2;
wire   [31:0] sub_ln150_fu_881_p2;
reg   [31:0] sub_ln150_reg_1269;
wire   [0:0] icmp_ln153_fu_898_p2;
reg   [0:0] icmp_ln153_reg_1274;
wire    ap_CS_fsm_state168;
wire   [63:0] add_ln28_3_fu_904_p2;
reg   [63:0] add_ln28_3_reg_1278;
wire    ap_CS_fsm_state169;
wire   [21:0] empty_54_fu_910_p1;
reg   [21:0] empty_54_reg_1283;
wire   [0:0] icmp_ln27_8_fu_924_p2;
reg   [0:0] icmp_ln27_8_reg_1294;
wire   [21:0] tmp_7_cast_fu_939_p3;
reg   [21:0] tmp_7_cast_reg_1302;
wire    ap_CS_fsm_state171;
reg   [21:0] table_str_addr_7_reg_1307;
reg   [21:0] table_str_addr_8_reg_1312;
wire    ap_CS_fsm_state172;
wire   [0:0] icmp_ln8_fu_975_p2;
reg   [0:0] icmp_ln8_reg_1318;
wire   [9:0] add_ln8_fu_981_p2;
reg   [9:0] add_ln8_reg_1322;
wire   [21:0] add_ln157_1_fu_998_p2;
reg   [21:0] add_ln157_1_reg_1335;
wire    ap_CS_fsm_state174;
wire   [30:0] add_ln131_fu_1018_p2;
reg   [30:0] add_ln131_reg_1340;
wire    ap_CS_fsm_state175;
wire   [1:0] trunc_ln165_1_fu_1028_p1;
reg   [1:0] trunc_ln165_1_reg_1345;
wire    ap_CS_fsm_state178;
reg   [63:0] gmem_addr_6_reg_1350;
wire   [3:0] shl_ln165_fu_1069_p2;
reg   [3:0] shl_ln165_reg_1356;
reg   [21:0] table_str_address0;
reg    table_str_ce0;
reg    table_str_we0;
reg   [7:0] table_str_d0;
wire   [7:0] table_str_q0;
reg   [21:0] table_str_address1;
reg    table_str_ce1;
reg    table_str_we1;
reg   [7:0] table_str_d1;
reg   [9:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [7:0] temp_d0;
wire   [7:0] temp_q0;
reg   [9:0] new_str_address0;
reg    new_str_ce0;
reg    new_str_we0;
reg   [7:0] new_str_d0;
wire   [7:0] new_str_q0;
wire    grp_string_copy_1_fu_496_ap_start;
wire    grp_string_copy_1_fu_496_ap_done;
wire    grp_string_copy_1_fu_496_ap_idle;
wire    grp_string_copy_1_fu_496_ap_ready;
wire    grp_string_copy_1_fu_496_m_axi_gmem_AWVALID;
wire   [63:0] grp_string_copy_1_fu_496_m_axi_gmem_AWADDR;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_AWID;
wire   [31:0] grp_string_copy_1_fu_496_m_axi_gmem_AWLEN;
wire   [2:0] grp_string_copy_1_fu_496_m_axi_gmem_AWSIZE;
wire   [1:0] grp_string_copy_1_fu_496_m_axi_gmem_AWBURST;
wire   [1:0] grp_string_copy_1_fu_496_m_axi_gmem_AWLOCK;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_AWCACHE;
wire   [2:0] grp_string_copy_1_fu_496_m_axi_gmem_AWPROT;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_AWQOS;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_AWREGION;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_AWUSER;
wire    grp_string_copy_1_fu_496_m_axi_gmem_WVALID;
wire   [31:0] grp_string_copy_1_fu_496_m_axi_gmem_WDATA;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_WSTRB;
wire    grp_string_copy_1_fu_496_m_axi_gmem_WLAST;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_WID;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_WUSER;
wire    grp_string_copy_1_fu_496_m_axi_gmem_ARVALID;
wire   [63:0] grp_string_copy_1_fu_496_m_axi_gmem_ARADDR;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_ARID;
wire   [31:0] grp_string_copy_1_fu_496_m_axi_gmem_ARLEN;
wire   [2:0] grp_string_copy_1_fu_496_m_axi_gmem_ARSIZE;
wire   [1:0] grp_string_copy_1_fu_496_m_axi_gmem_ARBURST;
wire   [1:0] grp_string_copy_1_fu_496_m_axi_gmem_ARLOCK;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_ARCACHE;
wire   [2:0] grp_string_copy_1_fu_496_m_axi_gmem_ARPROT;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_ARQOS;
wire   [3:0] grp_string_copy_1_fu_496_m_axi_gmem_ARREGION;
wire   [0:0] grp_string_copy_1_fu_496_m_axi_gmem_ARUSER;
wire    grp_string_copy_1_fu_496_m_axi_gmem_RREADY;
wire    grp_string_copy_1_fu_496_m_axi_gmem_BREADY;
reg   [63:0] grp_string_copy_1_fu_496_dest;
wire   [9:0] grp_string_copy_1_fu_496_src_address0;
wire    grp_string_copy_1_fu_496_src_ce0;
reg   [7:0] grp_string_copy_1_fu_496_src_q0;
reg   [31:0] grp_string_copy_1_fu_496_max_len;
wire    grp_string_copy_16_fu_506_ap_start;
wire    grp_string_copy_16_fu_506_ap_done;
wire    grp_string_copy_16_fu_506_ap_idle;
wire    grp_string_copy_16_fu_506_ap_ready;
wire   [9:0] grp_string_copy_16_fu_506_dest_address0;
wire    grp_string_copy_16_fu_506_dest_ce0;
wire    grp_string_copy_16_fu_506_dest_we0;
wire   [7:0] grp_string_copy_16_fu_506_dest_d0;
wire   [21:0] grp_string_copy_16_fu_506_src_address0;
wire    grp_string_copy_16_fu_506_src_ce0;
reg   [11:0] grp_string_copy_16_fu_506_src_offset;
wire    grp_string_copy_fu_513_ap_start;
wire    grp_string_copy_fu_513_ap_done;
wire    grp_string_copy_fu_513_ap_idle;
wire    grp_string_copy_fu_513_ap_ready;
wire   [9:0] grp_string_copy_fu_513_dest_address0;
wire    grp_string_copy_fu_513_dest_ce0;
wire    grp_string_copy_fu_513_dest_we0;
wire   [7:0] grp_string_copy_fu_513_dest_d0;
wire   [9:0] grp_string_copy_fu_513_src_address0;
wire    grp_string_copy_fu_513_src_ce0;
reg   [7:0] grp_string_copy_fu_513_src_q0;
reg   [8:0] i_11_reg_368;
wire   [0:0] icmp_ln111_fu_534_p2;
reg   [10:0] empty_48_reg_379;
wire   [0:0] exitcond683_fu_579_p2;
wire    ap_CS_fsm_state3;
reg   [63:0] len_4_reg_390;
wire   [0:0] and_ln27_fu_655_p2;
wire    ap_CS_fsm_state79;
reg   [30:0] i_9_reg_403;
wire    ap_CS_fsm_state177;
reg  signed [31:0] out_index_6_reg_415;
reg   [10:0] empty_51_reg_425;
wire   [0:0] exitcond1_fu_699_p2;
reg   [63:0] len_5_reg_436;
wire   [0:0] and_ln27_1_fu_802_p2;
reg   [63:0] len_reg_450;
wire   [0:0] and_ln27_2_fu_850_p2;
wire    ap_CS_fsm_state163;
reg   [63:0] len_6_reg_463;
wire    ap_CS_fsm_state170;
wire   [0:0] and_ln27_3_fu_930_p2;
reg   [9:0] i_10_reg_475;
wire    ap_CS_fsm_state173;
wire   [0:0] icmp_ln8_8_fu_987_p2;
reg  signed [31:0] out_index_0_lcssa_reg_486;
reg    grp_string_copy_1_fu_496_ap_start_reg;
wire    ap_CS_fsm_state78;
reg    grp_string_copy_16_fu_506_ap_start_reg;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state164;
reg    grp_string_copy_fu_513_ap_start_reg;
wire    ap_CS_fsm_state160;
wire    ap_CS_fsm_state176;
wire    ap_CS_fsm_state161;
wire   [63:0] zext_ln112_fu_548_p1;
wire   [63:0] tmp_6_fu_559_p3;
wire   [63:0] p_cast_fu_585_p1;
wire   [63:0] p_cast2_fu_705_p1;
wire   [63:0] zext_ln141_fu_817_p1;
wire    ap_CS_fsm_state162;
wire   [63:0] zext_ln156_fu_952_p1;
wire   [63:0] zext_ln11_fu_970_p1;
wire   [63:0] i_11_cast_fu_957_p1;
wire   [63:0] zext_ln157_fu_1014_p1;
wire  signed [63:0] sext_ln121_fu_599_p1;
wire  signed [63:0] sext_ln133_fu_737_p1;
wire  signed [63:0] sext_ln165_1_fu_1047_p1;
reg   [31:0] table_size_fu_170;
wire   [31:0] table_size_2_fu_1003_p2;
wire   [7:0] trunc_ln112_fu_568_p1;
wire   [18:0] tmp_fu_540_p3;
wire   [18:0] or_ln113_fu_553_p2;
wire   [61:0] trunc_ln7_fu_590_p4;
wire   [7:0] trunc_ln123_fu_625_p1;
wire   [53:0] tmp_5_fu_633_p4;
wire   [0:0] grp_fu_519_p2;
wire   [30:0] tmp_7_fu_664_p4;
wire   [31:0] zext_ln131_fu_684_p1;
wire   [32:0] shl_ln_fu_710_p3;
wire   [63:0] zext_ln133_fu_718_p1;
wire   [63:0] add_ln133_fu_722_p2;
wire   [61:0] trunc_ln1_fu_727_p4;
wire   [0:0] tmp_9_fu_752_p3;
wire   [0:0] icmp_ln135_fu_747_p2;
wire   [0:0] xor_ln135_fu_759_p2;
wire   [53:0] tmp_10_fu_780_p4;
wire   [9:0] trunc_ln138_fu_807_p1;
wire   [9:0] add_ln141_fu_811_p2;
wire   [53:0] tmp_11_fu_822_p4;
wire   [0:0] icmp_ln27_5_fu_844_p2;
wire   [31:0] trunc_ln146_fu_855_p1;
wire  signed [63:0] sext_ln150_fu_871_p1;
wire   [19:0] tmp_12_fu_888_p4;
wire   [53:0] tmp_13_fu_914_p4;
wire   [11:0] trunc_ln11_fu_935_p1;
wire   [21:0] add_ln156_fu_947_p2;
wire   [41:0] tmp_8_fu_962_p3;
wire   [21:0] add_ln157_fu_993_p2;
wire  signed [63:0] sext_ln165_fu_1024_p1;
wire   [63:0] add_ln165_fu_1032_p2;
wire   [61:0] trunc_ln_fu_1037_p4;
wire   [1:0] trunc_ln165_fu_1057_p1;
wire   [1:0] add_ln165_1_fu_1060_p2;
wire   [3:0] zext_ln165_fu_1065_p1;
reg   [247:0] ap_NS_fsm;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 248'd1;
#0 grp_string_copy_1_fu_496_ap_start_reg = 1'b0;
#0 grp_string_copy_16_fu_506_ap_start_reg = 1'b0;
#0 grp_string_copy_fu_513_ap_start_reg = 1'b0;
end

lzw_fpga_decoding_table_str #(
    .DataWidth( 8 ),
    .AddressRange( 4194304 ),
    .AddressWidth( 22 ))
table_str_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_str_address0),
    .ce0(table_str_ce0),
    .we0(table_str_we0),
    .d0(table_str_d0),
    .q0(table_str_q0),
    .address1(table_str_address1),
    .ce1(table_str_ce1),
    .we1(table_str_we1),
    .d1(table_str_d1)
);

lzw_fpga_decoding_temp #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

lzw_fpga_decoding_temp #(
    .DataWidth( 8 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
new_str_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(new_str_address0),
    .ce0(new_str_ce0),
    .we0(new_str_we0),
    .d0(new_str_d0),
    .q0(new_str_q0)
);

lzw_fpga_string_copy_1 grp_string_copy_1_fu_496(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_string_copy_1_fu_496_ap_start),
    .ap_done(grp_string_copy_1_fu_496_ap_done),
    .ap_idle(grp_string_copy_1_fu_496_ap_idle),
    .ap_ready(grp_string_copy_1_fu_496_ap_ready),
    .m_axi_gmem_AWVALID(grp_string_copy_1_fu_496_m_axi_gmem_AWVALID),
    .m_axi_gmem_AWREADY(m_axi_gmem_AWREADY),
    .m_axi_gmem_AWADDR(grp_string_copy_1_fu_496_m_axi_gmem_AWADDR),
    .m_axi_gmem_AWID(grp_string_copy_1_fu_496_m_axi_gmem_AWID),
    .m_axi_gmem_AWLEN(grp_string_copy_1_fu_496_m_axi_gmem_AWLEN),
    .m_axi_gmem_AWSIZE(grp_string_copy_1_fu_496_m_axi_gmem_AWSIZE),
    .m_axi_gmem_AWBURST(grp_string_copy_1_fu_496_m_axi_gmem_AWBURST),
    .m_axi_gmem_AWLOCK(grp_string_copy_1_fu_496_m_axi_gmem_AWLOCK),
    .m_axi_gmem_AWCACHE(grp_string_copy_1_fu_496_m_axi_gmem_AWCACHE),
    .m_axi_gmem_AWPROT(grp_string_copy_1_fu_496_m_axi_gmem_AWPROT),
    .m_axi_gmem_AWQOS(grp_string_copy_1_fu_496_m_axi_gmem_AWQOS),
    .m_axi_gmem_AWREGION(grp_string_copy_1_fu_496_m_axi_gmem_AWREGION),
    .m_axi_gmem_AWUSER(grp_string_copy_1_fu_496_m_axi_gmem_AWUSER),
    .m_axi_gmem_WVALID(grp_string_copy_1_fu_496_m_axi_gmem_WVALID),
    .m_axi_gmem_WREADY(m_axi_gmem_WREADY),
    .m_axi_gmem_WDATA(grp_string_copy_1_fu_496_m_axi_gmem_WDATA),
    .m_axi_gmem_WSTRB(grp_string_copy_1_fu_496_m_axi_gmem_WSTRB),
    .m_axi_gmem_WLAST(grp_string_copy_1_fu_496_m_axi_gmem_WLAST),
    .m_axi_gmem_WID(grp_string_copy_1_fu_496_m_axi_gmem_WID),
    .m_axi_gmem_WUSER(grp_string_copy_1_fu_496_m_axi_gmem_WUSER),
    .m_axi_gmem_ARVALID(grp_string_copy_1_fu_496_m_axi_gmem_ARVALID),
    .m_axi_gmem_ARREADY(1'b0),
    .m_axi_gmem_ARADDR(grp_string_copy_1_fu_496_m_axi_gmem_ARADDR),
    .m_axi_gmem_ARID(grp_string_copy_1_fu_496_m_axi_gmem_ARID),
    .m_axi_gmem_ARLEN(grp_string_copy_1_fu_496_m_axi_gmem_ARLEN),
    .m_axi_gmem_ARSIZE(grp_string_copy_1_fu_496_m_axi_gmem_ARSIZE),
    .m_axi_gmem_ARBURST(grp_string_copy_1_fu_496_m_axi_gmem_ARBURST),
    .m_axi_gmem_ARLOCK(grp_string_copy_1_fu_496_m_axi_gmem_ARLOCK),
    .m_axi_gmem_ARCACHE(grp_string_copy_1_fu_496_m_axi_gmem_ARCACHE),
    .m_axi_gmem_ARPROT(grp_string_copy_1_fu_496_m_axi_gmem_ARPROT),
    .m_axi_gmem_ARQOS(grp_string_copy_1_fu_496_m_axi_gmem_ARQOS),
    .m_axi_gmem_ARREGION(grp_string_copy_1_fu_496_m_axi_gmem_ARREGION),
    .m_axi_gmem_ARUSER(grp_string_copy_1_fu_496_m_axi_gmem_ARUSER),
    .m_axi_gmem_RVALID(1'b0),
    .m_axi_gmem_RREADY(grp_string_copy_1_fu_496_m_axi_gmem_RREADY),
    .m_axi_gmem_RDATA(32'd0),
    .m_axi_gmem_RLAST(1'b0),
    .m_axi_gmem_RID(1'd0),
    .m_axi_gmem_RUSER(1'd0),
    .m_axi_gmem_RRESP(2'd0),
    .m_axi_gmem_BVALID(m_axi_gmem_BVALID),
    .m_axi_gmem_BREADY(grp_string_copy_1_fu_496_m_axi_gmem_BREADY),
    .m_axi_gmem_BRESP(m_axi_gmem_BRESP),
    .m_axi_gmem_BID(m_axi_gmem_BID),
    .m_axi_gmem_BUSER(m_axi_gmem_BUSER),
    .dest(grp_string_copy_1_fu_496_dest),
    .src_address0(grp_string_copy_1_fu_496_src_address0),
    .src_ce0(grp_string_copy_1_fu_496_src_ce0),
    .src_q0(grp_string_copy_1_fu_496_src_q0),
    .max_len(grp_string_copy_1_fu_496_max_len)
);

lzw_fpga_string_copy_16 grp_string_copy_16_fu_506(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_string_copy_16_fu_506_ap_start),
    .ap_done(grp_string_copy_16_fu_506_ap_done),
    .ap_idle(grp_string_copy_16_fu_506_ap_idle),
    .ap_ready(grp_string_copy_16_fu_506_ap_ready),
    .dest_address0(grp_string_copy_16_fu_506_dest_address0),
    .dest_ce0(grp_string_copy_16_fu_506_dest_ce0),
    .dest_we0(grp_string_copy_16_fu_506_dest_we0),
    .dest_d0(grp_string_copy_16_fu_506_dest_d0),
    .src_address0(grp_string_copy_16_fu_506_src_address0),
    .src_ce0(grp_string_copy_16_fu_506_src_ce0),
    .src_q0(table_str_q0),
    .src_offset(grp_string_copy_16_fu_506_src_offset)
);

lzw_fpga_string_copy grp_string_copy_fu_513(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_string_copy_fu_513_ap_start),
    .ap_done(grp_string_copy_fu_513_ap_done),
    .ap_idle(grp_string_copy_fu_513_ap_idle),
    .ap_ready(grp_string_copy_fu_513_ap_ready),
    .dest_address0(grp_string_copy_fu_513_dest_address0),
    .dest_ce0(grp_string_copy_fu_513_dest_ce0),
    .dest_we0(grp_string_copy_fu_513_dest_we0),
    .dest_d0(grp_string_copy_fu_513_dest_d0),
    .src_address0(grp_string_copy_fu_513_src_address0),
    .src_ce0(grp_string_copy_fu_513_src_ce0),
    .src_q0(grp_string_copy_fu_513_src_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_string_copy_16_fu_506_ap_start_reg <= 1'b0;
    end else begin
        if ((((1'd1 == and_ln135_fu_765_p2) & (1'b1 == ap_CS_fsm_state157)) | ((icmp_ln122_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76)))) begin
            grp_string_copy_16_fu_506_ap_start_reg <= 1'b1;
        end else if ((grp_string_copy_16_fu_506_ap_ready == 1'b1)) begin
            grp_string_copy_16_fu_506_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_string_copy_1_fu_496_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state78) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
            grp_string_copy_1_fu_496_ap_start_reg <= 1'b1;
        end else if ((grp_string_copy_1_fu_496_ap_ready == 1'b1)) begin
            grp_string_copy_1_fu_496_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_string_copy_fu_513_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state176) | (1'b1 == ap_CS_fsm_state160))) begin
            grp_string_copy_fu_513_ap_start_reg <= 1'b1;
        end else if ((grp_string_copy_fu_513_ap_ready == 1'b1)) begin
            grp_string_copy_fu_513_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        empty_48_reg_379 <= 11'd0;
    end else if (((exitcond683_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        empty_48_reg_379 <= empty_49_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond1_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
        empty_51_reg_425 <= empty_52_fu_693_p2;
    end else if (((icmp_ln131_1_fu_688_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state83))) begin
        empty_51_reg_425 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state171)) begin
        i_10_reg_475 <= 10'd0;
    end else if (((icmp_ln8_8_fu_987_p2 == 1'd0) & (icmp_ln8_reg_1318 == 1'd0) & (1'b1 == ap_CS_fsm_state173))) begin
        i_10_reg_475 <= add_ln8_reg_1322;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_11_reg_368 <= 9'd0;
    end else if (((icmp_ln111_fu_534_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_11_reg_368 <= i_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
        i_9_reg_403 <= 31'd1;
    end else if (((grp_string_copy_fu_513_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state177))) begin
        i_9_reg_403 <= add_ln131_reg_1340;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_string_copy_1_fu_496_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
        len_4_reg_390 <= 64'd0;
    end else if (((1'd1 == and_ln27_fu_655_p2) & (1'b1 == ap_CS_fsm_state81))) begin
        len_4_reg_390 <= add_ln28_fu_649_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln135_fu_765_p2) & (icmp_ln137_fu_771_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state157))) begin
        len_5_reg_436 <= 64'd0;
    end else if (((1'd1 == and_ln27_1_fu_802_p2) & (1'b1 == ap_CS_fsm_state159))) begin
        len_5_reg_436 <= add_ln28_1_fu_796_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_string_copy_1_fu_496_ap_done == 1'b1) & (icmp_ln153_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state168))) begin
        len_6_reg_463 <= 64'd0;
    end else if (((1'd1 == and_ln27_3_fu_930_p2) & (1'b1 == ap_CS_fsm_state170))) begin
        len_6_reg_463 <= add_ln28_3_reg_1278;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        len_reg_450 <= 64'd0;
    end else if (((1'd1 == and_ln27_2_fu_850_p2) & (1'b1 == ap_CS_fsm_state166))) begin
        len_reg_450 <= add_ln28_2_fu_838_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_1_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
        out_index_0_lcssa_reg_486 <= out_index_6_reg_415;
    end else if (((icmp_ln131_fu_673_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state82))) begin
        out_index_0_lcssa_reg_486 <= trunc_ln118_fu_660_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
        out_index_6_reg_415 <= trunc_ln118_fu_660_p1;
    end else if (((grp_string_copy_fu_513_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state177))) begin
        out_index_6_reg_415 <= out_index_7_reg_1256;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln131_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
        table_size_fu_170 <= 32'd256;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        table_size_fu_170 <= table_size_2_fu_1003_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        add_ln131_reg_1340 <= add_ln131_fu_1018_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1))))) begin
        add_ln150_reg_1264 <= add_ln150_fu_875_p2;
        sub_ln150_reg_1269 <= sub_ln150_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state174)) begin
        add_ln157_1_reg_1335 <= add_ln157_1_fu_998_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state169)) begin
        add_ln28_3_reg_1278 <= add_ln28_3_fu_904_p2;
        empty_54_reg_1283 <= empty_54_fu_910_p1;
        icmp_ln27_8_reg_1294 <= icmp_ln27_8_fu_924_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state172)) begin
        add_ln8_reg_1322 <= add_ln8_fu_981_p2;
        icmp_ln8_reg_1318 <= icmp_ln8_fu_975_p2;
        table_str_addr_8_reg_1312 <= zext_ln11_fu_970_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        and_ln135_reg_1207 <= and_ln135_fu_765_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state156)) begin
        current_code_1_reg_1199 <= m_axi_gmem_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state75)) begin
        current_code_reg_1117 <= m_axi_gmem_RDATA;
        tmp_4_reg_1122 <= {{m_axi_gmem_RDATA[31:8]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state178)) begin
        gmem_addr_6_reg_1350 <= sext_ln165_1_fu_1047_p1;
        trunc_ln165_1_reg_1345 <= trunc_ln165_1_fu_1028_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state85)) begin
        gmem_addr_7_reg_1193 <= sext_ln133_fu_737_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state76)) begin
        icmp_ln122_reg_1132 <= icmp_ln122_fu_620_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state83)) begin
        icmp_ln131_1_reg_1181 <= icmp_ln131_1_fu_688_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state82)) begin
        icmp_ln131_reg_1170 <= icmp_ln131_fu_673_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'd0 == and_ln135_fu_765_p2) & (1'b1 == ap_CS_fsm_state157))) begin
        icmp_ln137_reg_1211 <= icmp_ln137_fu_771_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        icmp_ln153_reg_1274 <= icmp_ln153_fu_898_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state80)) begin
        icmp_ln27_2_reg_1146 <= icmp_ln27_2_fu_643_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        icmp_ln27_4_reg_1225 <= icmp_ln27_4_fu_790_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        icmp_ln27_6_reg_1243 <= icmp_ln27_6_fu_832_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state167) & (((icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1))))) begin
        out_index_7_reg_1256 <= out_index_7_fu_859_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        shl_ln165_reg_1356 <= shl_ln165_fu_1069_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state171)) begin
        table_str_addr_7_reg_1307 <= zext_ln156_fu_952_p1;
        tmp_7_cast_reg_1302[21 : 10] <= tmp_7_cast_fu_939_p3[21 : 10];
    end
end

always @ (posedge ap_clk) begin
    if (((1'd1 == and_ln135_fu_765_p2) & (1'b1 == ap_CS_fsm_state157))) begin
        trunc_ln136_reg_1215 <= trunc_ln136_fu_776_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln122_fu_620_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state76))) begin
        zext_ln123_reg_1136[7 : 0] <= zext_ln123_fu_628_p1[7 : 0];
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state167) & ((icmp_ln122_reg_1132 == 1'd0) | ((icmp_ln131_reg_1170 == 1'd0) | ((icmp_ln131_1_reg_1181 == 1'd0) | ((icmp_ln146_fu_865_p2 == 1'd1) | ((1'd0 == and_ln135_reg_1207) & (icmp_ln137_reg_1211 == 1'd0))))))) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state167) & ((icmp_ln122_reg_1132 == 1'd0) | ((icmp_ln131_reg_1170 == 1'd0) | ((icmp_ln131_1_reg_1181 == 1'd0) | ((icmp_ln146_fu_865_p2 == 1'd1) | ((1'd0 == and_ln135_reg_1207) & (icmp_ln137_reg_1211 == 1'd0)))))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state5))) begin
        gmem_blk_n_AR = m_axi_gmem_ARREADY;
    end else begin
        gmem_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state179)) begin
        gmem_blk_n_AW = m_axi_gmem_AWREADY;
    end else begin
        gmem_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state248)) begin
        gmem_blk_n_B = m_axi_gmem_BVALID;
    end else begin
        gmem_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state75))) begin
        gmem_blk_n_R = m_axi_gmem_RVALID;
    end else begin
        gmem_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state180)) begin
        gmem_blk_n_W = m_axi_gmem_WREADY;
    end else begin
        gmem_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state164)) begin
        grp_string_copy_16_fu_506_src_offset = trunc_ln136_reg_1215;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        grp_string_copy_16_fu_506_src_offset = zext_ln123_reg_1136;
    end else begin
        grp_string_copy_16_fu_506_src_offset = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_string_copy_1_fu_496_dest = add_ln150_reg_1264;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_string_copy_1_fu_496_dest = output_r;
    end else begin
        grp_string_copy_1_fu_496_dest = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_string_copy_1_fu_496_max_len = sub_ln150_reg_1269;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_string_copy_1_fu_496_max_len = 32'd1024;
    end else begin
        grp_string_copy_1_fu_496_max_len = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state168)) begin
        grp_string_copy_1_fu_496_src_q0 = new_str_q0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        grp_string_copy_1_fu_496_src_q0 = temp_q0;
    end else begin
        grp_string_copy_1_fu_496_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state177)) begin
        grp_string_copy_fu_513_src_q0 = new_str_q0;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        grp_string_copy_fu_513_src_q0 = temp_q0;
    end else begin
        grp_string_copy_fu_513_src_q0 = 'bx;
    end
end

always @ (*) begin
    if ((m_axi_gmem_ARREADY == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state86)) begin
            m_axi_gmem_ARADDR = gmem_addr_7_reg_1193;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_gmem_ARADDR = sext_ln121_fu_599_p1;
        end else begin
            m_axi_gmem_ARADDR = 'bx;
        end
    end else begin
        m_axi_gmem_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state86)) | ((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5)))) begin
        m_axi_gmem_ARVALID = 1'b1;
    end else begin
        m_axi_gmem_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state179))) begin
        m_axi_gmem_AWADDR = gmem_addr_6_reg_1350;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWADDR = grp_string_copy_1_fu_496_m_axi_gmem_AWADDR;
    end else begin
        m_axi_gmem_AWADDR = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWBURST = grp_string_copy_1_fu_496_m_axi_gmem_AWBURST;
    end else begin
        m_axi_gmem_AWBURST = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWCACHE = grp_string_copy_1_fu_496_m_axi_gmem_AWCACHE;
    end else begin
        m_axi_gmem_AWCACHE = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWID = grp_string_copy_1_fu_496_m_axi_gmem_AWID;
    end else begin
        m_axi_gmem_AWID = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state179))) begin
        m_axi_gmem_AWLEN = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWLEN = grp_string_copy_1_fu_496_m_axi_gmem_AWLEN;
    end else begin
        m_axi_gmem_AWLEN = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWLOCK = grp_string_copy_1_fu_496_m_axi_gmem_AWLOCK;
    end else begin
        m_axi_gmem_AWLOCK = 2'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWPROT = grp_string_copy_1_fu_496_m_axi_gmem_AWPROT;
    end else begin
        m_axi_gmem_AWPROT = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWQOS = grp_string_copy_1_fu_496_m_axi_gmem_AWQOS;
    end else begin
        m_axi_gmem_AWQOS = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWREGION = grp_string_copy_1_fu_496_m_axi_gmem_AWREGION;
    end else begin
        m_axi_gmem_AWREGION = 4'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWSIZE = grp_string_copy_1_fu_496_m_axi_gmem_AWSIZE;
    end else begin
        m_axi_gmem_AWSIZE = 3'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWUSER = grp_string_copy_1_fu_496_m_axi_gmem_AWUSER;
    end else begin
        m_axi_gmem_AWUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state179))) begin
        m_axi_gmem_AWVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_AWVALID = grp_string_copy_1_fu_496_m_axi_gmem_AWVALID;
    end else begin
        m_axi_gmem_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state248))) begin
        m_axi_gmem_BREADY = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_BREADY = grp_string_copy_1_fu_496_m_axi_gmem_BREADY;
    end else begin
        m_axi_gmem_BREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state156)) | ((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75)))) begin
        m_axi_gmem_RREADY = 1'b1;
    end else begin
        m_axi_gmem_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state180)) begin
        m_axi_gmem_WDATA = 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WDATA = grp_string_copy_1_fu_496_m_axi_gmem_WDATA;
    end else begin
        m_axi_gmem_WDATA = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WID = grp_string_copy_1_fu_496_m_axi_gmem_WID;
    end else begin
        m_axi_gmem_WID = 1'd0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WLAST = grp_string_copy_1_fu_496_m_axi_gmem_WLAST;
    end else begin
        m_axi_gmem_WLAST = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state180)) begin
        m_axi_gmem_WSTRB = shl_ln165_reg_1356;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WSTRB = grp_string_copy_1_fu_496_m_axi_gmem_WSTRB;
    end else begin
        m_axi_gmem_WSTRB = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WUSER = grp_string_copy_1_fu_496_m_axi_gmem_WUSER;
    end else begin
        m_axi_gmem_WUSER = 1'd0;
    end
end

always @ (*) begin
    if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state180))) begin
        m_axi_gmem_WVALID = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state168) | ((1'b1 == ap_CS_fsm_state167) & (((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln137_reg_1211 == 1'd1) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (icmp_ln122_reg_1132 == 1'd1)) | ((icmp_ln146_fu_865_p2 == 1'd0) & (icmp_ln131_1_reg_1181 == 1'd1) & (icmp_ln131_reg_1170 == 1'd1) & (1'd1 == and_ln135_reg_1207) & (icmp_ln122_reg_1132 == 1'd1)))))) begin
        m_axi_gmem_WVALID = grp_string_copy_1_fu_496_m_axi_gmem_WVALID;
    end else begin
        m_axi_gmem_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state174)) begin
        new_str_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state165)) begin
        new_str_address0 = len_reg_450;
    end else if ((1'b1 == ap_CS_fsm_state163)) begin
        new_str_address0 = len_5_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        new_str_address0 = zext_ln141_fu_817_p1;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        new_str_address0 = p_cast2_fu_705_p1;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        new_str_address0 = grp_string_copy_fu_513_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        new_str_address0 = grp_string_copy_fu_513_dest_address0;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        new_str_address0 = grp_string_copy_16_fu_506_dest_address0;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        new_str_address0 = grp_string_copy_1_fu_496_src_address0;
    end else begin
        new_str_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state163) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state165) | (1'b1 == ap_CS_fsm_state84))) begin
        new_str_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        new_str_ce0 = grp_string_copy_fu_513_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        new_str_ce0 = grp_string_copy_fu_513_dest_ce0;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        new_str_ce0 = grp_string_copy_16_fu_506_dest_ce0;
    end else if ((1'b1 == ap_CS_fsm_state168)) begin
        new_str_ce0 = grp_string_copy_1_fu_496_src_ce0;
    end else begin
        new_str_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state163)) begin
        new_str_d0 = temp_q0;
    end else if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state84))) begin
        new_str_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        new_str_d0 = grp_string_copy_fu_513_dest_d0;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        new_str_d0 = grp_string_copy_16_fu_506_dest_d0;
    end else begin
        new_str_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) | ((1'd0 == and_ln135_reg_1207) & (1'b1 == ap_CS_fsm_state163)) | ((exitcond1_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state84)))) begin
        new_str_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        new_str_we0 = grp_string_copy_fu_513_dest_we0;
    end else if ((1'b1 == ap_CS_fsm_state164)) begin
        new_str_we0 = grp_string_copy_16_fu_506_dest_we0;
    end else begin
        new_str_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        table_str_address0 = zext_ln157_fu_1014_p1;
    end else if ((1'b1 == ap_CS_fsm_state173)) begin
        table_str_address0 = table_str_addr_8_reg_1312;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        table_str_address0 = tmp_6_fu_559_p3;
    end else if (((1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state77))) begin
        table_str_address0 = grp_string_copy_16_fu_506_src_address0;
    end else begin
        table_str_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        table_str_address1 = table_str_addr_7_reg_1307;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        table_str_address1 = table_str_addr_8_reg_1312;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        table_str_address1 = zext_ln112_fu_548_p1;
    end else begin
        table_str_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state173) | (1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state2))) begin
        table_str_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state164) | (1'b1 == ap_CS_fsm_state77))) begin
        table_str_ce0 = grp_string_copy_16_fu_506_src_ce0;
    end else begin
        table_str_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state174) | (1'b1 == ap_CS_fsm_state2))) begin
        table_str_ce1 = 1'b1;
    end else begin
        table_str_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state173)) begin
        table_str_d0 = temp_q0;
    end else if (((1'b1 == ap_CS_fsm_state175) | (1'b1 == ap_CS_fsm_state2))) begin
        table_str_d0 = 8'd0;
    end else begin
        table_str_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state175)) begin
        table_str_d1 = new_str_q0;
    end else if ((1'b1 == ap_CS_fsm_state174)) begin
        table_str_d1 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        table_str_d1 = trunc_ln112_fu_568_p1;
    end else begin
        table_str_d1 = 'bx;
    end
end

always @ (*) begin
    if ((((icmp_ln153_reg_1274 == 1'd1) & (1'b1 == ap_CS_fsm_state175)) | ((icmp_ln8_8_fu_987_p2 == 1'd0) & (icmp_ln8_reg_1318 == 1'd0) & (1'b1 == ap_CS_fsm_state173)) | ((icmp_ln111_fu_534_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        table_str_we0 = 1'b1;
    end else begin
        table_str_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state174) | ((icmp_ln153_reg_1274 == 1'd1) & (1'b1 == ap_CS_fsm_state175)) | ((icmp_ln111_fu_534_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        table_str_we1 = 1'b1;
    end else begin
        table_str_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state172)) begin
        temp_address0 = i_11_cast_fu_957_p1;
    end else if ((1'b1 == ap_CS_fsm_state169)) begin
        temp_address0 = len_6_reg_463;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        temp_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state158)) begin
        temp_address0 = len_5_reg_436;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        temp_address0 = len_4_reg_390;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_address0 = p_cast_fu_585_p1;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        temp_address0 = grp_string_copy_fu_513_src_address0;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        temp_address0 = grp_string_copy_fu_513_dest_address0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        temp_address0 = grp_string_copy_16_fu_506_dest_address0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        temp_address0 = grp_string_copy_1_fu_496_src_address0;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state162) | (1'b1 == ap_CS_fsm_state172) | (1'b1 == ap_CS_fsm_state169) | (1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state4))) begin
        temp_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state161)) begin
        temp_ce0 = grp_string_copy_fu_513_src_ce0;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        temp_ce0 = grp_string_copy_fu_513_dest_ce0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        temp_ce0 = grp_string_copy_16_fu_506_dest_ce0;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        temp_ce0 = grp_string_copy_1_fu_496_src_ce0;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        temp_d0 = 8'd0;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        temp_d0 = grp_string_copy_fu_513_dest_d0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        temp_d0 = grp_string_copy_16_fu_506_dest_d0;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((exitcond683_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        temp_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state177)) begin
        temp_we0 = grp_string_copy_fu_513_dest_we0;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        temp_we0 = grp_string_copy_16_fu_506_dest_we0;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln111_fu_534_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((exitcond683_fu_579_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state75))) begin
                ap_NS_fsm = ap_ST_fsm_state76;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state75;
            end
        end
        ap_ST_fsm_state76 : begin
            if (((icmp_ln122_fu_620_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state76))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state77 : begin
            if (((grp_string_copy_16_fu_506_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state77))) begin
                ap_NS_fsm = ap_ST_fsm_state78;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state77;
            end
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            if (((grp_string_copy_1_fu_496_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state79))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state79;
            end
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            if (((1'd1 == and_ln27_fu_655_p2) & (1'b1 == ap_CS_fsm_state81))) begin
                ap_NS_fsm = ap_ST_fsm_state80;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state82;
            end
        end
        ap_ST_fsm_state82 : begin
            if (((icmp_ln131_fu_673_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state82))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state178;
            end
        end
        ap_ST_fsm_state83 : begin
            if (((icmp_ln131_1_fu_688_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state83))) begin
                ap_NS_fsm = ap_ST_fsm_state178;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end
        end
        ap_ST_fsm_state84 : begin
            if (((exitcond1_fu_699_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state84))) begin
                ap_NS_fsm = ap_ST_fsm_state84;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state85;
            end
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            if (((m_axi_gmem_ARREADY == 1'b1) & (1'b1 == ap_CS_fsm_state86))) begin
                ap_NS_fsm = ap_ST_fsm_state87;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state86;
            end
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            ap_NS_fsm = ap_ST_fsm_state104;
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            ap_NS_fsm = ap_ST_fsm_state134;
        end
        ap_ST_fsm_state134 : begin
            ap_NS_fsm = ap_ST_fsm_state135;
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            ap_NS_fsm = ap_ST_fsm_state137;
        end
        ap_ST_fsm_state137 : begin
            ap_NS_fsm = ap_ST_fsm_state138;
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state141 : begin
            ap_NS_fsm = ap_ST_fsm_state142;
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state143;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            ap_NS_fsm = ap_ST_fsm_state146;
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state147;
        end
        ap_ST_fsm_state147 : begin
            ap_NS_fsm = ap_ST_fsm_state148;
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            ap_NS_fsm = ap_ST_fsm_state150;
        end
        ap_ST_fsm_state150 : begin
            ap_NS_fsm = ap_ST_fsm_state151;
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state154 : begin
            ap_NS_fsm = ap_ST_fsm_state155;
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state156;
        end
        ap_ST_fsm_state156 : begin
            if (((m_axi_gmem_RVALID == 1'b1) & (1'b1 == ap_CS_fsm_state156))) begin
                ap_NS_fsm = ap_ST_fsm_state157;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end
        end
        ap_ST_fsm_state157 : begin
            if (((1'd0 == and_ln135_fu_765_p2) & (icmp_ln137_fu_771_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state157))) begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end else if (((1'd0 == and_ln135_fu_765_p2) & (icmp_ln137_fu_771_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state157))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state158 : begin
            ap_NS_fsm = ap_ST_fsm_state159;
        end
        ap_ST_fsm_state159 : begin
            if (((1'd1 == and_ln27_1_fu_802_p2) & (1'b1 == ap_CS_fsm_state159))) begin
                ap_NS_fsm = ap_ST_fsm_state158;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state160 : begin
            ap_NS_fsm = ap_ST_fsm_state161;
        end
        ap_ST_fsm_state161 : begin
            if (((grp_string_copy_fu_513_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state161))) begin
                ap_NS_fsm = ap_ST_fsm_state162;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_state163;
        end
        ap_ST_fsm_state163 : begin
            ap_NS_fsm = ap_ST_fsm_state165;
        end
        ap_ST_fsm_state164 : begin
            if (((grp_string_copy_16_fu_506_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state164))) begin
                ap_NS_fsm = ap_ST_fsm_state163;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state164;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_state166;
        end
        ap_ST_fsm_state166 : begin
            if (((1'd1 == and_ln27_2_fu_850_p2) & (1'b1 == ap_CS_fsm_state166))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end
        end
        ap_ST_fsm_state167 : begin
            if (((1'b1 == ap_CS_fsm_state167) & ((icmp_ln122_reg_1132 == 1'd0) | ((icmp_ln131_reg_1170 == 1'd0) | ((icmp_ln131_1_reg_1181 == 1'd0) | ((icmp_ln146_fu_865_p2 == 1'd1) | ((1'd0 == and_ln135_reg_1207) & (icmp_ln137_reg_1211 == 1'd0)))))))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state168 : begin
            if (((grp_string_copy_1_fu_496_ap_done == 1'b1) & (icmp_ln153_fu_898_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else if (((grp_string_copy_1_fu_496_ap_done == 1'b1) & (icmp_ln153_fu_898_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state168))) begin
                ap_NS_fsm = ap_ST_fsm_state175;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state168;
            end
        end
        ap_ST_fsm_state169 : begin
            ap_NS_fsm = ap_ST_fsm_state170;
        end
        ap_ST_fsm_state170 : begin
            if (((1'd1 == and_ln27_3_fu_930_p2) & (1'b1 == ap_CS_fsm_state170))) begin
                ap_NS_fsm = ap_ST_fsm_state169;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state171;
            end
        end
        ap_ST_fsm_state171 : begin
            ap_NS_fsm = ap_ST_fsm_state172;
        end
        ap_ST_fsm_state172 : begin
            ap_NS_fsm = ap_ST_fsm_state173;
        end
        ap_ST_fsm_state173 : begin
            if (((icmp_ln8_8_fu_987_p2 == 1'd0) & (icmp_ln8_reg_1318 == 1'd0) & (1'b1 == ap_CS_fsm_state173))) begin
                ap_NS_fsm = ap_ST_fsm_state172;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state174;
            end
        end
        ap_ST_fsm_state174 : begin
            ap_NS_fsm = ap_ST_fsm_state175;
        end
        ap_ST_fsm_state175 : begin
            ap_NS_fsm = ap_ST_fsm_state176;
        end
        ap_ST_fsm_state176 : begin
            ap_NS_fsm = ap_ST_fsm_state177;
        end
        ap_ST_fsm_state177 : begin
            if (((grp_string_copy_fu_513_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state177))) begin
                ap_NS_fsm = ap_ST_fsm_state83;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state177;
            end
        end
        ap_ST_fsm_state178 : begin
            ap_NS_fsm = ap_ST_fsm_state179;
        end
        ap_ST_fsm_state179 : begin
            if (((m_axi_gmem_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state179))) begin
                ap_NS_fsm = ap_ST_fsm_state180;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state179;
            end
        end
        ap_ST_fsm_state180 : begin
            if (((m_axi_gmem_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state180))) begin
                ap_NS_fsm = ap_ST_fsm_state181;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state180;
            end
        end
        ap_ST_fsm_state181 : begin
            ap_NS_fsm = ap_ST_fsm_state182;
        end
        ap_ST_fsm_state182 : begin
            ap_NS_fsm = ap_ST_fsm_state183;
        end
        ap_ST_fsm_state183 : begin
            ap_NS_fsm = ap_ST_fsm_state184;
        end
        ap_ST_fsm_state184 : begin
            ap_NS_fsm = ap_ST_fsm_state185;
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            ap_NS_fsm = ap_ST_fsm_state202;
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state203;
        end
        ap_ST_fsm_state203 : begin
            ap_NS_fsm = ap_ST_fsm_state204;
        end
        ap_ST_fsm_state204 : begin
            ap_NS_fsm = ap_ST_fsm_state205;
        end
        ap_ST_fsm_state205 : begin
            ap_NS_fsm = ap_ST_fsm_state206;
        end
        ap_ST_fsm_state206 : begin
            ap_NS_fsm = ap_ST_fsm_state207;
        end
        ap_ST_fsm_state207 : begin
            ap_NS_fsm = ap_ST_fsm_state208;
        end
        ap_ST_fsm_state208 : begin
            ap_NS_fsm = ap_ST_fsm_state209;
        end
        ap_ST_fsm_state209 : begin
            ap_NS_fsm = ap_ST_fsm_state210;
        end
        ap_ST_fsm_state210 : begin
            ap_NS_fsm = ap_ST_fsm_state211;
        end
        ap_ST_fsm_state211 : begin
            ap_NS_fsm = ap_ST_fsm_state212;
        end
        ap_ST_fsm_state212 : begin
            ap_NS_fsm = ap_ST_fsm_state213;
        end
        ap_ST_fsm_state213 : begin
            ap_NS_fsm = ap_ST_fsm_state214;
        end
        ap_ST_fsm_state214 : begin
            ap_NS_fsm = ap_ST_fsm_state215;
        end
        ap_ST_fsm_state215 : begin
            ap_NS_fsm = ap_ST_fsm_state216;
        end
        ap_ST_fsm_state216 : begin
            ap_NS_fsm = ap_ST_fsm_state217;
        end
        ap_ST_fsm_state217 : begin
            ap_NS_fsm = ap_ST_fsm_state218;
        end
        ap_ST_fsm_state218 : begin
            ap_NS_fsm = ap_ST_fsm_state219;
        end
        ap_ST_fsm_state219 : begin
            ap_NS_fsm = ap_ST_fsm_state220;
        end
        ap_ST_fsm_state220 : begin
            ap_NS_fsm = ap_ST_fsm_state221;
        end
        ap_ST_fsm_state221 : begin
            ap_NS_fsm = ap_ST_fsm_state222;
        end
        ap_ST_fsm_state222 : begin
            ap_NS_fsm = ap_ST_fsm_state223;
        end
        ap_ST_fsm_state223 : begin
            ap_NS_fsm = ap_ST_fsm_state224;
        end
        ap_ST_fsm_state224 : begin
            ap_NS_fsm = ap_ST_fsm_state225;
        end
        ap_ST_fsm_state225 : begin
            ap_NS_fsm = ap_ST_fsm_state226;
        end
        ap_ST_fsm_state226 : begin
            ap_NS_fsm = ap_ST_fsm_state227;
        end
        ap_ST_fsm_state227 : begin
            ap_NS_fsm = ap_ST_fsm_state228;
        end
        ap_ST_fsm_state228 : begin
            ap_NS_fsm = ap_ST_fsm_state229;
        end
        ap_ST_fsm_state229 : begin
            ap_NS_fsm = ap_ST_fsm_state230;
        end
        ap_ST_fsm_state230 : begin
            ap_NS_fsm = ap_ST_fsm_state231;
        end
        ap_ST_fsm_state231 : begin
            ap_NS_fsm = ap_ST_fsm_state232;
        end
        ap_ST_fsm_state232 : begin
            ap_NS_fsm = ap_ST_fsm_state233;
        end
        ap_ST_fsm_state233 : begin
            ap_NS_fsm = ap_ST_fsm_state234;
        end
        ap_ST_fsm_state234 : begin
            ap_NS_fsm = ap_ST_fsm_state235;
        end
        ap_ST_fsm_state235 : begin
            ap_NS_fsm = ap_ST_fsm_state236;
        end
        ap_ST_fsm_state236 : begin
            ap_NS_fsm = ap_ST_fsm_state237;
        end
        ap_ST_fsm_state237 : begin
            ap_NS_fsm = ap_ST_fsm_state238;
        end
        ap_ST_fsm_state238 : begin
            ap_NS_fsm = ap_ST_fsm_state239;
        end
        ap_ST_fsm_state239 : begin
            ap_NS_fsm = ap_ST_fsm_state240;
        end
        ap_ST_fsm_state240 : begin
            ap_NS_fsm = ap_ST_fsm_state241;
        end
        ap_ST_fsm_state241 : begin
            ap_NS_fsm = ap_ST_fsm_state242;
        end
        ap_ST_fsm_state242 : begin
            ap_NS_fsm = ap_ST_fsm_state243;
        end
        ap_ST_fsm_state243 : begin
            ap_NS_fsm = ap_ST_fsm_state244;
        end
        ap_ST_fsm_state244 : begin
            ap_NS_fsm = ap_ST_fsm_state245;
        end
        ap_ST_fsm_state245 : begin
            ap_NS_fsm = ap_ST_fsm_state246;
        end
        ap_ST_fsm_state246 : begin
            ap_NS_fsm = ap_ST_fsm_state247;
        end
        ap_ST_fsm_state247 : begin
            ap_NS_fsm = ap_ST_fsm_state248;
        end
        ap_ST_fsm_state248 : begin
            if (((m_axi_gmem_BVALID == 1'b1) & (1'b1 == ap_CS_fsm_state248))) begin
                ap_NS_fsm = ap_ST_fsm_state167;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state248;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln131_fu_1018_p2 = (i_9_reg_403 + 31'd1);

assign add_ln133_fu_722_p2 = (zext_ln133_fu_718_p1 + encoded_data);

assign add_ln141_fu_811_p2 = (trunc_ln138_fu_807_p1 + 10'd1);

assign add_ln150_fu_875_p2 = ($signed(sext_ln150_fu_871_p1) + $signed(output_r));

assign add_ln156_fu_947_p2 = (tmp_7_cast_fu_939_p3 + empty_54_reg_1283);

assign add_ln157_1_fu_998_p2 = (tmp_7_cast_reg_1302 + add_ln157_fu_993_p2);

assign add_ln157_fu_993_p2 = (empty_54_reg_1283 + 22'd1);

assign add_ln165_1_fu_1060_p2 = (trunc_ln165_1_reg_1345 + trunc_ln165_fu_1057_p1);

assign add_ln165_fu_1032_p2 = ($signed(sext_ln165_fu_1024_p1) + $signed(output_r));

assign add_ln28_1_fu_796_p2 = (len_5_reg_436 + 64'd1);

assign add_ln28_2_fu_838_p2 = (len_reg_450 + 64'd1);

assign add_ln28_3_fu_904_p2 = (len_6_reg_463 + 64'd1);

assign add_ln28_fu_649_p2 = (len_4_reg_390 + 64'd1);

assign add_ln8_fu_981_p2 = (i_10_reg_475 + 10'd1);

assign and_ln135_fu_765_p2 = (xor_ln135_fu_759_p2 & icmp_ln135_fu_747_p2);

assign and_ln27_1_fu_802_p2 = (icmp_ln27_4_reg_1225 & grp_fu_519_p2);

assign and_ln27_2_fu_850_p2 = (icmp_ln27_6_reg_1243 & icmp_ln27_5_fu_844_p2);

assign and_ln27_3_fu_930_p2 = (icmp_ln27_8_reg_1294 & grp_fu_519_p2);

assign and_ln27_fu_655_p2 = (icmp_ln27_2_reg_1146 & grp_fu_519_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state163 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_state164 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_state166 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_state167 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_state168 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state169 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state170 = ap_CS_fsm[32'd169];

assign ap_CS_fsm_state171 = ap_CS_fsm[32'd170];

assign ap_CS_fsm_state172 = ap_CS_fsm[32'd171];

assign ap_CS_fsm_state173 = ap_CS_fsm[32'd172];

assign ap_CS_fsm_state174 = ap_CS_fsm[32'd173];

assign ap_CS_fsm_state175 = ap_CS_fsm[32'd174];

assign ap_CS_fsm_state176 = ap_CS_fsm[32'd175];

assign ap_CS_fsm_state177 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state178 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state179 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state180 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state248 = ap_CS_fsm[32'd247];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign empty_49_fu_573_p2 = (empty_48_reg_379 + 11'd1);

assign empty_52_fu_693_p2 = (empty_51_reg_425 + 11'd1);

assign empty_54_fu_910_p1 = len_6_reg_463[21:0];

assign exitcond1_fu_699_p2 = ((empty_51_reg_425 == 11'd1024) ? 1'b1 : 1'b0);

assign exitcond683_fu_579_p2 = ((empty_48_reg_379 == 11'd1024) ? 1'b1 : 1'b0);

assign grp_fu_519_p2 = ((temp_q0 != 8'd0) ? 1'b1 : 1'b0);

assign grp_string_copy_16_fu_506_ap_start = grp_string_copy_16_fu_506_ap_start_reg;

assign grp_string_copy_1_fu_496_ap_start = grp_string_copy_1_fu_496_ap_start_reg;

assign grp_string_copy_fu_513_ap_start = grp_string_copy_fu_513_ap_start_reg;

assign i_11_cast_fu_957_p1 = i_10_reg_475;

assign i_fu_528_p2 = (i_11_reg_368 + 9'd1);

assign icmp_ln111_fu_534_p2 = ((i_11_reg_368 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln122_fu_620_p2 = ((tmp_4_reg_1122 == 24'd0) ? 1'b1 : 1'b0);

assign icmp_ln131_1_fu_688_p2 = (($signed(zext_ln131_fu_684_p1) < $signed(encoded_size)) ? 1'b1 : 1'b0);

assign icmp_ln131_fu_673_p2 = (($signed(tmp_7_fu_664_p4) > $signed(31'd0)) ? 1'b1 : 1'b0);

assign icmp_ln135_fu_747_p2 = (($signed(current_code_1_reg_1199) < $signed(table_size_fu_170)) ? 1'b1 : 1'b0);

assign icmp_ln137_fu_771_p2 = ((current_code_1_reg_1199 == table_size_fu_170) ? 1'b1 : 1'b0);

assign icmp_ln146_fu_865_p2 = (($signed(out_index_7_fu_859_p2) > $signed(32'd1022)) ? 1'b1 : 1'b0);

assign icmp_ln153_fu_898_p2 = (($signed(tmp_12_fu_888_p4) < $signed(20'd1)) ? 1'b1 : 1'b0);

assign icmp_ln27_2_fu_643_p2 = (($signed(tmp_5_fu_633_p4) < $signed(54'd1)) ? 1'b1 : 1'b0);

assign icmp_ln27_4_fu_790_p2 = (($signed(tmp_10_fu_780_p4) < $signed(54'd1)) ? 1'b1 : 1'b0);

assign icmp_ln27_5_fu_844_p2 = ((new_str_q0 != 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln27_6_fu_832_p2 = (($signed(tmp_11_fu_822_p4) < $signed(54'd1)) ? 1'b1 : 1'b0);

assign icmp_ln27_8_fu_924_p2 = (($signed(tmp_13_fu_914_p4) < $signed(54'd1)) ? 1'b1 : 1'b0);

assign icmp_ln8_8_fu_987_p2 = ((temp_q0 == 8'd0) ? 1'b1 : 1'b0);

assign icmp_ln8_fu_975_p2 = ((i_10_reg_475 == 10'd1023) ? 1'b1 : 1'b0);

assign m_axi_gmem_ARBURST = 2'd0;

assign m_axi_gmem_ARCACHE = 4'd0;

assign m_axi_gmem_ARID = 1'd0;

assign m_axi_gmem_ARLEN = 32'd1;

assign m_axi_gmem_ARLOCK = 2'd0;

assign m_axi_gmem_ARPROT = 3'd0;

assign m_axi_gmem_ARQOS = 4'd0;

assign m_axi_gmem_ARREGION = 4'd0;

assign m_axi_gmem_ARSIZE = 3'd0;

assign m_axi_gmem_ARUSER = 1'd0;

assign or_ln113_fu_553_p2 = (tmp_fu_540_p3 | 19'd1);

assign out_index_7_fu_859_p2 = ($signed(trunc_ln146_fu_855_p1) + $signed(out_index_6_reg_415));

assign p_cast2_fu_705_p1 = empty_51_reg_425;

assign p_cast_fu_585_p1 = empty_48_reg_379;

assign sext_ln121_fu_599_p1 = $signed(trunc_ln7_fu_590_p4);

assign sext_ln133_fu_737_p1 = $signed(trunc_ln1_fu_727_p4);

assign sext_ln150_fu_871_p1 = out_index_6_reg_415;

assign sext_ln165_1_fu_1047_p1 = $signed(trunc_ln_fu_1037_p4);

assign sext_ln165_fu_1024_p1 = out_index_0_lcssa_reg_486;

assign shl_ln165_fu_1069_p2 = 4'd1 << zext_ln165_fu_1065_p1;

assign shl_ln_fu_710_p3 = {{i_9_reg_403}, {2'd0}};

assign sub_ln150_fu_881_p2 = ($signed(32'd1024) - $signed(out_index_6_reg_415));

assign table_size_2_fu_1003_p2 = (table_size_fu_170 + 32'd1);

assign tmp_10_fu_780_p4 = {{len_5_reg_436[63:10]}};

assign tmp_11_fu_822_p4 = {{len_reg_450[63:10]}};

assign tmp_12_fu_888_p4 = {{table_size_fu_170[31:12]}};

assign tmp_13_fu_914_p4 = {{len_6_reg_463[63:10]}};

assign tmp_5_fu_633_p4 = {{len_4_reg_390[63:10]}};

assign tmp_6_fu_559_p3 = {{45'd0}, {or_ln113_fu_553_p2}};

assign tmp_7_cast_fu_939_p3 = {{trunc_ln11_fu_935_p1}, {10'd0}};

assign tmp_7_fu_664_p4 = {{encoded_size[31:1]}};

assign tmp_8_fu_962_p3 = {{table_size_fu_170}, {i_10_reg_475}};

assign tmp_9_fu_752_p3 = current_code_1_reg_1199[32'd31];

assign tmp_fu_540_p3 = {{i_11_reg_368}, {10'd0}};

assign trunc_ln112_fu_568_p1 = i_11_reg_368[7:0];

assign trunc_ln118_fu_660_p1 = len_4_reg_390[31:0];

assign trunc_ln11_fu_935_p1 = table_size_fu_170[11:0];

assign trunc_ln123_fu_625_p1 = current_code_reg_1117[7:0];

assign trunc_ln136_fu_776_p1 = current_code_1_reg_1199[11:0];

assign trunc_ln138_fu_807_p1 = len_5_reg_436[9:0];

assign trunc_ln146_fu_855_p1 = len_reg_450[31:0];

assign trunc_ln165_1_fu_1028_p1 = out_index_0_lcssa_reg_486[1:0];

assign trunc_ln165_fu_1057_p1 = output_r[1:0];

assign trunc_ln1_fu_727_p4 = {{add_ln133_fu_722_p2[63:2]}};

assign trunc_ln7_fu_590_p4 = {{encoded_data[63:2]}};

assign trunc_ln_fu_1037_p4 = {{add_ln165_fu_1032_p2[63:2]}};

assign xor_ln135_fu_759_p2 = (tmp_9_fu_752_p3 ^ 1'd1);

assign zext_ln112_fu_548_p1 = tmp_fu_540_p3;

assign zext_ln11_fu_970_p1 = tmp_8_fu_962_p3;

assign zext_ln123_fu_628_p1 = trunc_ln123_fu_625_p1;

assign zext_ln131_fu_684_p1 = i_9_reg_403;

assign zext_ln133_fu_718_p1 = shl_ln_fu_710_p3;

assign zext_ln141_fu_817_p1 = add_ln141_fu_811_p2;

assign zext_ln156_fu_952_p1 = add_ln156_fu_947_p2;

assign zext_ln157_fu_1014_p1 = add_ln157_1_reg_1335;

assign zext_ln165_fu_1065_p1 = add_ln165_1_fu_1060_p2;

always @ (posedge ap_clk) begin
    zext_ln123_reg_1136[11:8] <= 4'b0000;
    tmp_7_cast_reg_1302[9:0] <= 10'b0000000000;
end

endmodule //lzw_fpga_decoding
