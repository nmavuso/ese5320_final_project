-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2020.2 (64-bit)
-- Version: 2020.2
-- Copyright (C) Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity lzw_fpga is
generic (
    C_M_AXI_GMEM_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_gmem_AWVALID : OUT STD_LOGIC;
    m_axi_gmem_AWREADY : IN STD_LOGIC;
    m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem_WVALID : OUT STD_LOGIC;
    m_axi_gmem_WREADY : IN STD_LOGIC;
    m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem_WLAST : OUT STD_LOGIC;
    m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_WUSER_WIDTH-1 downto 0);
    m_axi_gmem_ARVALID : OUT STD_LOGIC;
    m_axi_gmem_ARREADY : IN STD_LOGIC;
    m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ADDR_WIDTH-1 downto 0);
    m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem_RVALID : IN STD_LOGIC;
    m_axi_gmem_RREADY : OUT STD_LOGIC;
    m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_DATA_WIDTH-1 downto 0);
    m_axi_gmem_RLAST : IN STD_LOGIC;
    m_axi_gmem_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_RUSER_WIDTH-1 downto 0);
    m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BVALID : IN STD_LOGIC;
    m_axi_gmem_BREADY : OUT STD_LOGIC;
    m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_ID_WIDTH-1 downto 0);
    m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM_BUSER_WIDTH-1 downto 0);
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of lzw_fpga is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "lzw_fpga_lzw_fpga,hls_ip_2020_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu3eg-sbva484-1-i,HLS_INPUT_CLOCK=6.700000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=4.891000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=4109,HLS_SYN_DSP=0,HLS_SYN_FF=4736,HLS_SYN_LUT=9907,HLS_VERSION=2020_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (74 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (74 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (74 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (74 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (74 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (74 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (74 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (74 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (74 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (74 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (74 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (74 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (74 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_rst_reg_2 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_2 : signal is "no";
    signal ap_rst_reg_1 : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_reg_1 : signal is "no";
    signal ap_rst_n_inv : STD_LOGIC := '1';
attribute shreg_extract of ap_rst_n_inv : signal is "no";
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_continue : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (74 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal s : STD_LOGIC_VECTOR (63 downto 0);
    signal output_code : STD_LOGIC_VECTOR (63 downto 0);
    signal output_size : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal gmem_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal gmem_AWVALID : STD_LOGIC;
    signal gmem_AWREADY : STD_LOGIC;
    signal gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WVALID : STD_LOGIC;
    signal gmem_WREADY : STD_LOGIC;
    signal gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_WLAST : STD_LOGIC;
    signal gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARVALID : STD_LOGIC;
    signal gmem_ARREADY : STD_LOGIC;
    signal gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RVALID : STD_LOGIC;
    signal gmem_RREADY : STD_LOGIC;
    signal gmem_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem_RLAST : STD_LOGIC;
    signal gmem_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BVALID : STD_LOGIC;
    signal gmem_BREADY : STD_LOGIC;
    signal gmem_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem_addr_reg_162 : STD_LOGIC_VECTOR (63 downto 0);
    signal gmem_addr_read_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal grp_encoding_fu_104_ap_start : STD_LOGIC;
    signal grp_encoding_fu_104_ap_done : STD_LOGIC;
    signal grp_encoding_fu_104_ap_idle : STD_LOGIC;
    signal grp_encoding_fu_104_ap_ready : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_encoding_fu_104_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_encoding_fu_104_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_decoding_fu_116_ap_start : STD_LOGIC;
    signal grp_decoding_fu_116_ap_done : STD_LOGIC;
    signal grp_decoding_fu_116_ap_idle : STD_LOGIC;
    signal grp_decoding_fu_116_ap_ready : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_AWVALID : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_WVALID : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_WLAST : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARVALID : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_decoding_fu_116_m_axi_gmem_RREADY : STD_LOGIC;
    signal grp_decoding_fu_116_m_axi_gmem_BREADY : STD_LOGIC;
    signal grp_encoding_fu_104_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_state1_ignore_call17 : BOOLEAN;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_decoding_fu_116_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal sext_ln530_fu_136_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal trunc_ln_fu_126_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (74 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component lzw_fpga_encoding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r : IN STD_LOGIC_VECTOR (63 downto 0);
        output_code : IN STD_LOGIC_VECTOR (63 downto 0);
        output_size : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lzw_fpga_decoding IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_gmem_AWVALID : OUT STD_LOGIC;
        m_axi_gmem_AWREADY : IN STD_LOGIC;
        m_axi_gmem_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WVALID : OUT STD_LOGIC;
        m_axi_gmem_WREADY : IN STD_LOGIC;
        m_axi_gmem_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_WLAST : OUT STD_LOGIC;
        m_axi_gmem_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARVALID : OUT STD_LOGIC;
        m_axi_gmem_ARREADY : IN STD_LOGIC;
        m_axi_gmem_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RVALID : IN STD_LOGIC;
        m_axi_gmem_RREADY : OUT STD_LOGIC;
        m_axi_gmem_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem_RLAST : IN STD_LOGIC;
        m_axi_gmem_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BVALID : IN STD_LOGIC;
        m_axi_gmem_BREADY : OUT STD_LOGIC;
        m_axi_gmem_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        encoded_data : IN STD_LOGIC_VECTOR (63 downto 0);
        encoded_size : IN STD_LOGIC_VECTOR (31 downto 0);
        output_r : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component lzw_fpga_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        s : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_code : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_size : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_continue : OUT STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component lzw_fpga_gmem_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component lzw_fpga_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        s => s,
        output_code => output_code,
        output_size => output_size,
        output_r => output_r,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_continue => ap_continue,
        ap_idle => ap_idle);

    gmem_m_axi_U : component lzw_fpga_gmem_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 69,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem_AWVALID,
        AWREADY => m_axi_gmem_AWREADY,
        AWADDR => m_axi_gmem_AWADDR,
        AWID => m_axi_gmem_AWID,
        AWLEN => m_axi_gmem_AWLEN,
        AWSIZE => m_axi_gmem_AWSIZE,
        AWBURST => m_axi_gmem_AWBURST,
        AWLOCK => m_axi_gmem_AWLOCK,
        AWCACHE => m_axi_gmem_AWCACHE,
        AWPROT => m_axi_gmem_AWPROT,
        AWQOS => m_axi_gmem_AWQOS,
        AWREGION => m_axi_gmem_AWREGION,
        AWUSER => m_axi_gmem_AWUSER,
        WVALID => m_axi_gmem_WVALID,
        WREADY => m_axi_gmem_WREADY,
        WDATA => m_axi_gmem_WDATA,
        WSTRB => m_axi_gmem_WSTRB,
        WLAST => m_axi_gmem_WLAST,
        WID => m_axi_gmem_WID,
        WUSER => m_axi_gmem_WUSER,
        ARVALID => m_axi_gmem_ARVALID,
        ARREADY => m_axi_gmem_ARREADY,
        ARADDR => m_axi_gmem_ARADDR,
        ARID => m_axi_gmem_ARID,
        ARLEN => m_axi_gmem_ARLEN,
        ARSIZE => m_axi_gmem_ARSIZE,
        ARBURST => m_axi_gmem_ARBURST,
        ARLOCK => m_axi_gmem_ARLOCK,
        ARCACHE => m_axi_gmem_ARCACHE,
        ARPROT => m_axi_gmem_ARPROT,
        ARQOS => m_axi_gmem_ARQOS,
        ARREGION => m_axi_gmem_ARREGION,
        ARUSER => m_axi_gmem_ARUSER,
        RVALID => m_axi_gmem_RVALID,
        RREADY => m_axi_gmem_RREADY,
        RDATA => m_axi_gmem_RDATA,
        RLAST => m_axi_gmem_RLAST,
        RID => m_axi_gmem_RID,
        RUSER => m_axi_gmem_RUSER,
        RRESP => m_axi_gmem_RRESP,
        BVALID => m_axi_gmem_BVALID,
        BREADY => m_axi_gmem_BREADY,
        BRESP => m_axi_gmem_BRESP,
        BID => m_axi_gmem_BID,
        BUSER => m_axi_gmem_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => gmem_ARVALID,
        I_ARREADY => gmem_ARREADY,
        I_ARADDR => gmem_ARADDR,
        I_ARID => gmem_ARID,
        I_ARLEN => gmem_ARLEN,
        I_ARSIZE => gmem_ARSIZE,
        I_ARLOCK => gmem_ARLOCK,
        I_ARCACHE => gmem_ARCACHE,
        I_ARQOS => gmem_ARQOS,
        I_ARPROT => gmem_ARPROT,
        I_ARUSER => gmem_ARUSER,
        I_ARBURST => gmem_ARBURST,
        I_ARREGION => gmem_ARREGION,
        I_RVALID => gmem_RVALID,
        I_RREADY => gmem_RREADY,
        I_RDATA => gmem_RDATA,
        I_RID => gmem_RID,
        I_RUSER => gmem_RUSER,
        I_RRESP => gmem_RRESP,
        I_RLAST => gmem_RLAST,
        I_AWVALID => gmem_AWVALID,
        I_AWREADY => gmem_AWREADY,
        I_AWADDR => gmem_AWADDR,
        I_AWID => gmem_AWID,
        I_AWLEN => gmem_AWLEN,
        I_AWSIZE => gmem_AWSIZE,
        I_AWLOCK => gmem_AWLOCK,
        I_AWCACHE => gmem_AWCACHE,
        I_AWQOS => gmem_AWQOS,
        I_AWPROT => gmem_AWPROT,
        I_AWUSER => gmem_AWUSER,
        I_AWBURST => gmem_AWBURST,
        I_AWREGION => gmem_AWREGION,
        I_WVALID => gmem_WVALID,
        I_WREADY => gmem_WREADY,
        I_WDATA => gmem_WDATA,
        I_WID => gmem_WID,
        I_WUSER => gmem_WUSER,
        I_WLAST => gmem_WLAST,
        I_WSTRB => gmem_WSTRB,
        I_BVALID => gmem_BVALID,
        I_BREADY => gmem_BREADY,
        I_BRESP => gmem_BRESP,
        I_BID => gmem_BID,
        I_BUSER => gmem_BUSER);

    grp_encoding_fu_104 : component lzw_fpga_encoding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_encoding_fu_104_ap_start,
        ap_done => grp_encoding_fu_104_ap_done,
        ap_idle => grp_encoding_fu_104_ap_idle,
        ap_ready => grp_encoding_fu_104_ap_ready,
        m_axi_gmem_AWVALID => grp_encoding_fu_104_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_encoding_fu_104_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_encoding_fu_104_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_encoding_fu_104_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_encoding_fu_104_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_encoding_fu_104_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_encoding_fu_104_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_encoding_fu_104_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_encoding_fu_104_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_encoding_fu_104_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_encoding_fu_104_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_encoding_fu_104_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_encoding_fu_104_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_encoding_fu_104_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_encoding_fu_104_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_encoding_fu_104_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_encoding_fu_104_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_encoding_fu_104_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_encoding_fu_104_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_encoding_fu_104_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_encoding_fu_104_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_encoding_fu_104_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_encoding_fu_104_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_encoding_fu_104_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_encoding_fu_104_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_encoding_fu_104_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_encoding_fu_104_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_encoding_fu_104_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_encoding_fu_104_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_encoding_fu_104_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_encoding_fu_104_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_encoding_fu_104_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        input_r => s,
        output_code => output_code,
        output_size => output_size);

    grp_decoding_fu_116 : component lzw_fpga_decoding
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_decoding_fu_116_ap_start,
        ap_done => grp_decoding_fu_116_ap_done,
        ap_idle => grp_decoding_fu_116_ap_idle,
        ap_ready => grp_decoding_fu_116_ap_ready,
        m_axi_gmem_AWVALID => grp_decoding_fu_116_m_axi_gmem_AWVALID,
        m_axi_gmem_AWREADY => gmem_AWREADY,
        m_axi_gmem_AWADDR => grp_decoding_fu_116_m_axi_gmem_AWADDR,
        m_axi_gmem_AWID => grp_decoding_fu_116_m_axi_gmem_AWID,
        m_axi_gmem_AWLEN => grp_decoding_fu_116_m_axi_gmem_AWLEN,
        m_axi_gmem_AWSIZE => grp_decoding_fu_116_m_axi_gmem_AWSIZE,
        m_axi_gmem_AWBURST => grp_decoding_fu_116_m_axi_gmem_AWBURST,
        m_axi_gmem_AWLOCK => grp_decoding_fu_116_m_axi_gmem_AWLOCK,
        m_axi_gmem_AWCACHE => grp_decoding_fu_116_m_axi_gmem_AWCACHE,
        m_axi_gmem_AWPROT => grp_decoding_fu_116_m_axi_gmem_AWPROT,
        m_axi_gmem_AWQOS => grp_decoding_fu_116_m_axi_gmem_AWQOS,
        m_axi_gmem_AWREGION => grp_decoding_fu_116_m_axi_gmem_AWREGION,
        m_axi_gmem_AWUSER => grp_decoding_fu_116_m_axi_gmem_AWUSER,
        m_axi_gmem_WVALID => grp_decoding_fu_116_m_axi_gmem_WVALID,
        m_axi_gmem_WREADY => gmem_WREADY,
        m_axi_gmem_WDATA => grp_decoding_fu_116_m_axi_gmem_WDATA,
        m_axi_gmem_WSTRB => grp_decoding_fu_116_m_axi_gmem_WSTRB,
        m_axi_gmem_WLAST => grp_decoding_fu_116_m_axi_gmem_WLAST,
        m_axi_gmem_WID => grp_decoding_fu_116_m_axi_gmem_WID,
        m_axi_gmem_WUSER => grp_decoding_fu_116_m_axi_gmem_WUSER,
        m_axi_gmem_ARVALID => grp_decoding_fu_116_m_axi_gmem_ARVALID,
        m_axi_gmem_ARREADY => gmem_ARREADY,
        m_axi_gmem_ARADDR => grp_decoding_fu_116_m_axi_gmem_ARADDR,
        m_axi_gmem_ARID => grp_decoding_fu_116_m_axi_gmem_ARID,
        m_axi_gmem_ARLEN => grp_decoding_fu_116_m_axi_gmem_ARLEN,
        m_axi_gmem_ARSIZE => grp_decoding_fu_116_m_axi_gmem_ARSIZE,
        m_axi_gmem_ARBURST => grp_decoding_fu_116_m_axi_gmem_ARBURST,
        m_axi_gmem_ARLOCK => grp_decoding_fu_116_m_axi_gmem_ARLOCK,
        m_axi_gmem_ARCACHE => grp_decoding_fu_116_m_axi_gmem_ARCACHE,
        m_axi_gmem_ARPROT => grp_decoding_fu_116_m_axi_gmem_ARPROT,
        m_axi_gmem_ARQOS => grp_decoding_fu_116_m_axi_gmem_ARQOS,
        m_axi_gmem_ARREGION => grp_decoding_fu_116_m_axi_gmem_ARREGION,
        m_axi_gmem_ARUSER => grp_decoding_fu_116_m_axi_gmem_ARUSER,
        m_axi_gmem_RVALID => gmem_RVALID,
        m_axi_gmem_RREADY => grp_decoding_fu_116_m_axi_gmem_RREADY,
        m_axi_gmem_RDATA => gmem_RDATA,
        m_axi_gmem_RLAST => gmem_RLAST,
        m_axi_gmem_RID => gmem_RID,
        m_axi_gmem_RUSER => gmem_RUSER,
        m_axi_gmem_RRESP => gmem_RRESP,
        m_axi_gmem_BVALID => gmem_BVALID,
        m_axi_gmem_BREADY => grp_decoding_fu_116_m_axi_gmem_BREADY,
        m_axi_gmem_BRESP => gmem_BRESP,
        m_axi_gmem_BID => gmem_BID,
        m_axi_gmem_BUSER => gmem_BUSER,
        encoded_data => output_code,
        encoded_size => gmem_addr_read_reg_168,
        output_r => output_r);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_decoding_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_decoding_fu_116_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_decoding_fu_116_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
                    grp_decoding_fu_116_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_decoding_fu_116_ap_ready = ap_const_logic_1)) then 
                    grp_decoding_fu_116_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encoding_fu_104_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_encoding_fu_104_ap_start_reg <= ap_const_logic_0;
            else
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_encoding_fu_104_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encoding_fu_104_ap_ready = ap_const_logic_1)) then 
                    grp_encoding_fu_104_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_rst_n_inv_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_n_inv <= ap_rst_reg_1;
        end if;
    end process;

    ap_rst_reg_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_rst_reg_1 <= ap_rst_reg_2;
        end if;
    end process;

    ap_rst_reg_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
                        ap_rst_reg_2 <= not(ap_rst_n);
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state73)) then
                gmem_addr_read_reg_168 <= gmem_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                gmem_addr_reg_162 <= sext_ln530_fu_136_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state73, gmem_ARREADY, gmem_RVALID, grp_encoding_fu_104_ap_done, grp_decoding_fu_116_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_encoding_fu_104_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then
                    ap_NS_fsm <= ap_ST_fsm_state74;
                else
                    ap_NS_fsm <= ap_ST_fsm_state73;
                end if;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                if (((grp_decoding_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state75;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call17_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_ignore_call17 <= ((ap_done_reg = ap_const_logic_1) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_decoding_fu_116_ap_done, ap_CS_fsm_state75)
    begin
        if (((grp_decoding_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_decoding_fu_116_ap_done, ap_CS_fsm_state75)
    begin
        if (((grp_decoding_fu_116_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state75))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    gmem_ARADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, gmem_ARREADY, gmem_addr_reg_162, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARADDR, grp_decoding_fu_116_m_axi_gmem_ARADDR, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARADDR <= gmem_addr_reg_162;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARADDR <= grp_decoding_fu_116_m_axi_gmem_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARADDR <= grp_encoding_fu_104_m_axi_gmem_ARADDR;
        else 
            gmem_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARBURST, grp_decoding_fu_116_m_axi_gmem_ARBURST, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARBURST <= grp_decoding_fu_116_m_axi_gmem_ARBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARBURST <= grp_encoding_fu_104_m_axi_gmem_ARBURST;
        else 
            gmem_ARBURST <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARCACHE, grp_decoding_fu_116_m_axi_gmem_ARCACHE, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARCACHE <= grp_decoding_fu_116_m_axi_gmem_ARCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARCACHE <= grp_encoding_fu_104_m_axi_gmem_ARCACHE;
        else 
            gmem_ARCACHE <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARID, grp_decoding_fu_116_m_axi_gmem_ARID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARID <= grp_decoding_fu_116_m_axi_gmem_ARID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARID <= grp_encoding_fu_104_m_axi_gmem_ARID;
        else 
            gmem_ARID <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, gmem_ARREADY, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARLEN, grp_decoding_fu_116_m_axi_gmem_ARLEN, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARLEN <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARLEN <= grp_decoding_fu_116_m_axi_gmem_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLEN <= grp_encoding_fu_104_m_axi_gmem_ARLEN;
        else 
            gmem_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_ARLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARLOCK, grp_decoding_fu_116_m_axi_gmem_ARLOCK, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARLOCK <= grp_decoding_fu_116_m_axi_gmem_ARLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARLOCK <= grp_encoding_fu_104_m_axi_gmem_ARLOCK;
        else 
            gmem_ARLOCK <= ap_const_lv2_0;
        end if; 
    end process;


    gmem_ARPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARPROT, grp_decoding_fu_116_m_axi_gmem_ARPROT, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARPROT <= grp_decoding_fu_116_m_axi_gmem_ARPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARPROT <= grp_encoding_fu_104_m_axi_gmem_ARPROT;
        else 
            gmem_ARPROT <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARQOS, grp_decoding_fu_116_m_axi_gmem_ARQOS, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARQOS <= grp_decoding_fu_116_m_axi_gmem_ARQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARQOS <= grp_encoding_fu_104_m_axi_gmem_ARQOS;
        else 
            gmem_ARQOS <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARREGION, grp_decoding_fu_116_m_axi_gmem_ARREGION, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARREGION <= grp_decoding_fu_116_m_axi_gmem_ARREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARREGION <= grp_encoding_fu_104_m_axi_gmem_ARREGION;
        else 
            gmem_ARREGION <= ap_const_lv4_0;
        end if; 
    end process;


    gmem_ARSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARSIZE, grp_decoding_fu_116_m_axi_gmem_ARSIZE, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARSIZE <= grp_decoding_fu_116_m_axi_gmem_ARSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARSIZE <= grp_encoding_fu_104_m_axi_gmem_ARSIZE;
        else 
            gmem_ARSIZE <= ap_const_lv3_0;
        end if; 
    end process;


    gmem_ARUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARUSER, grp_decoding_fu_116_m_axi_gmem_ARUSER, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARUSER <= grp_decoding_fu_116_m_axi_gmem_ARUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARUSER <= grp_encoding_fu_104_m_axi_gmem_ARUSER;
        else 
            gmem_ARUSER <= ap_const_lv1_0;
        end if; 
    end process;


    gmem_ARVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state3, gmem_ARREADY, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_ARVALID, grp_decoding_fu_116_m_axi_gmem_ARVALID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((gmem_ARREADY = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            gmem_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_ARVALID <= grp_decoding_fu_116_m_axi_gmem_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_ARVALID <= grp_encoding_fu_104_m_axi_gmem_ARVALID;
        else 
            gmem_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_AWADDR_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWADDR, grp_decoding_fu_116_m_axi_gmem_AWADDR, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWADDR <= grp_decoding_fu_116_m_axi_gmem_AWADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWADDR <= grp_encoding_fu_104_m_axi_gmem_AWADDR;
        else 
            gmem_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWBURST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWBURST, grp_decoding_fu_116_m_axi_gmem_AWBURST, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWBURST <= grp_decoding_fu_116_m_axi_gmem_AWBURST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWBURST <= grp_encoding_fu_104_m_axi_gmem_AWBURST;
        else 
            gmem_AWBURST <= "XX";
        end if; 
    end process;


    gmem_AWCACHE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWCACHE, grp_decoding_fu_116_m_axi_gmem_AWCACHE, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWCACHE <= grp_decoding_fu_116_m_axi_gmem_AWCACHE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWCACHE <= grp_encoding_fu_104_m_axi_gmem_AWCACHE;
        else 
            gmem_AWCACHE <= "XXXX";
        end if; 
    end process;


    gmem_AWID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWID, grp_decoding_fu_116_m_axi_gmem_AWID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWID <= grp_decoding_fu_116_m_axi_gmem_AWID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWID <= grp_encoding_fu_104_m_axi_gmem_AWID;
        else 
            gmem_AWID <= "X";
        end if; 
    end process;


    gmem_AWLEN_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWLEN, grp_decoding_fu_116_m_axi_gmem_AWLEN, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWLEN <= grp_decoding_fu_116_m_axi_gmem_AWLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLEN <= grp_encoding_fu_104_m_axi_gmem_AWLEN;
        else 
            gmem_AWLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_AWLOCK_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWLOCK, grp_decoding_fu_116_m_axi_gmem_AWLOCK, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWLOCK <= grp_decoding_fu_116_m_axi_gmem_AWLOCK;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWLOCK <= grp_encoding_fu_104_m_axi_gmem_AWLOCK;
        else 
            gmem_AWLOCK <= "XX";
        end if; 
    end process;


    gmem_AWPROT_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWPROT, grp_decoding_fu_116_m_axi_gmem_AWPROT, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWPROT <= grp_decoding_fu_116_m_axi_gmem_AWPROT;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWPROT <= grp_encoding_fu_104_m_axi_gmem_AWPROT;
        else 
            gmem_AWPROT <= "XXX";
        end if; 
    end process;


    gmem_AWQOS_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWQOS, grp_decoding_fu_116_m_axi_gmem_AWQOS, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWQOS <= grp_decoding_fu_116_m_axi_gmem_AWQOS;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWQOS <= grp_encoding_fu_104_m_axi_gmem_AWQOS;
        else 
            gmem_AWQOS <= "XXXX";
        end if; 
    end process;


    gmem_AWREGION_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWREGION, grp_decoding_fu_116_m_axi_gmem_AWREGION, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWREGION <= grp_decoding_fu_116_m_axi_gmem_AWREGION;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWREGION <= grp_encoding_fu_104_m_axi_gmem_AWREGION;
        else 
            gmem_AWREGION <= "XXXX";
        end if; 
    end process;


    gmem_AWSIZE_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWSIZE, grp_decoding_fu_116_m_axi_gmem_AWSIZE, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWSIZE <= grp_decoding_fu_116_m_axi_gmem_AWSIZE;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWSIZE <= grp_encoding_fu_104_m_axi_gmem_AWSIZE;
        else 
            gmem_AWSIZE <= "XXX";
        end if; 
    end process;


    gmem_AWUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWUSER, grp_decoding_fu_116_m_axi_gmem_AWUSER, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWUSER <= grp_decoding_fu_116_m_axi_gmem_AWUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWUSER <= grp_encoding_fu_104_m_axi_gmem_AWUSER;
        else 
            gmem_AWUSER <= "X";
        end if; 
    end process;


    gmem_AWVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_AWVALID, grp_decoding_fu_116_m_axi_gmem_AWVALID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_AWVALID <= grp_decoding_fu_116_m_axi_gmem_AWVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_AWVALID <= grp_encoding_fu_104_m_axi_gmem_AWVALID;
        else 
            gmem_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_BREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_BREADY, grp_decoding_fu_116_m_axi_gmem_BREADY, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_BREADY <= grp_decoding_fu_116_m_axi_gmem_BREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_BREADY <= grp_encoding_fu_104_m_axi_gmem_BREADY;
        else 
            gmem_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_RREADY_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state73, gmem_RVALID, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_RREADY, grp_decoding_fu_116_m_axi_gmem_RREADY, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((gmem_RVALID = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state73))) then 
            gmem_RREADY <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_RREADY <= grp_decoding_fu_116_m_axi_gmem_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_RREADY <= grp_encoding_fu_104_m_axi_gmem_RREADY;
        else 
            gmem_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    gmem_WDATA_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WDATA, grp_decoding_fu_116_m_axi_gmem_WDATA, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WDATA <= grp_decoding_fu_116_m_axi_gmem_WDATA;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WDATA <= grp_encoding_fu_104_m_axi_gmem_WDATA;
        else 
            gmem_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    gmem_WID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WID, grp_decoding_fu_116_m_axi_gmem_WID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WID <= grp_decoding_fu_116_m_axi_gmem_WID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WID <= grp_encoding_fu_104_m_axi_gmem_WID;
        else 
            gmem_WID <= "X";
        end if; 
    end process;


    gmem_WLAST_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WLAST, grp_decoding_fu_116_m_axi_gmem_WLAST, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WLAST <= grp_decoding_fu_116_m_axi_gmem_WLAST;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WLAST <= grp_encoding_fu_104_m_axi_gmem_WLAST;
        else 
            gmem_WLAST <= 'X';
        end if; 
    end process;


    gmem_WSTRB_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WSTRB, grp_decoding_fu_116_m_axi_gmem_WSTRB, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WSTRB <= grp_decoding_fu_116_m_axi_gmem_WSTRB;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WSTRB <= grp_encoding_fu_104_m_axi_gmem_WSTRB;
        else 
            gmem_WSTRB <= "XXXX";
        end if; 
    end process;


    gmem_WUSER_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WUSER, grp_decoding_fu_116_m_axi_gmem_WUSER, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WUSER <= grp_decoding_fu_116_m_axi_gmem_WUSER;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WUSER <= grp_encoding_fu_104_m_axi_gmem_WUSER;
        else 
            gmem_WUSER <= "X";
        end if; 
    end process;


    gmem_WVALID_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state74, grp_encoding_fu_104_m_axi_gmem_WVALID, grp_decoding_fu_116_m_axi_gmem_WVALID, ap_CS_fsm_state2, ap_CS_fsm_state75)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74))) then 
            gmem_WVALID <= grp_decoding_fu_116_m_axi_gmem_WVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            gmem_WVALID <= grp_encoding_fu_104_m_axi_gmem_WVALID;
        else 
            gmem_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    gmem_blk_n_AR_assign_proc : process(m_axi_gmem_ARREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            gmem_blk_n_AR <= m_axi_gmem_ARREADY;
        else 
            gmem_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    gmem_blk_n_R_assign_proc : process(m_axi_gmem_RVALID, ap_CS_fsm_state73)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            gmem_blk_n_R <= m_axi_gmem_RVALID;
        else 
            gmem_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    grp_decoding_fu_116_ap_start <= grp_decoding_fu_116_ap_start_reg;
    grp_encoding_fu_104_ap_start <= grp_encoding_fu_104_ap_start_reg;
        sext_ln530_fu_136_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_126_p4),64));

    trunc_ln_fu_126_p4 <= output_size(63 downto 2);
end behav;
